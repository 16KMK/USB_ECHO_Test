
echo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb4  08007cb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb4  08007cb4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb4  08007cb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  200001e0  08007e9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001414  08007e9c  00021414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c195  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002774  00000000  00000000  0002c39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019765  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d98c  00000000  00000000  000495a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cc2  00000000  00000000  00056f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbbf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  000dbc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007bec 	.word	0x08007bec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08007bec 	.word	0x08007bec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000160:	f000 f964 	bl	800042c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000164:	f000 f81a 	bl	800019c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000168:	f000 f872 	bl	8000250 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 800016c:	f006 fbec 	bl	8006948 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8000170:	4808      	ldr	r0, [pc, #32]	; (8000194 <main+0x38>)
 8000172:	f7ff ffeb 	bl	800014c <strlen>
 8000176:	4603      	mov	r3, r0
 8000178:	b29b      	uxth	r3, r3
 800017a:	4619      	mov	r1, r3
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <main+0x38>)
 800017e:	f006 fcab 	bl	8006ad8 <CDC_Transmit_FS>
		sprintf("Input data:%s",buffer);
 8000182:	4904      	ldr	r1, [pc, #16]	; (8000194 <main+0x38>)
 8000184:	4804      	ldr	r0, [pc, #16]	; (8000198 <main+0x3c>)
 8000186:	f007 f8c5 	bl	8007314 <siprintf>
		HAL_Delay(10);
 800018a:	200a      	movs	r0, #10
 800018c:	f000 f9b0 	bl	80004f0 <HAL_Delay>
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8000190:	e7ee      	b.n	8000170 <main+0x14>
 8000192:	bf00      	nop
 8000194:	200001fc 	.word	0x200001fc
 8000198:	08007c04 	.word	0x08007c04

0800019c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b094      	sub	sp, #80	; 0x50
 80001a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f007 f8aa 	bl	8007304 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80001b0:	f107 0314 	add.w	r3, r7, #20
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001cc:	2301      	movs	r3, #1
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	2302      	movs	r3, #2
 80001e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 f80e 	bl	8002214 <HAL_RCC_OscConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x66>
		Error_Handler();
 80001fe:	f000 f849 	bl	8000294 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000202:	230f      	movs	r3, #15
 8000204:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000212:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fa7a 	bl	8002718 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x92>
		Error_Handler();
 800022a:	f000 f833 	bl	8000294 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800022e:	2310      	movs	r3, #16
 8000230:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fbc9 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0xac>
		Error_Handler();
 8000244:	f000 f826 	bl	8000294 <Error_Handler>
	}
}
 8000248:	bf00      	nop
 800024a:	3750      	adds	r7, #80	; 0x50
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <MX_GPIO_Init+0x40>)
 800025c:	f043 0320 	orr.w	r3, r3, #32
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0320 	and.w	r3, r3, #32
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <MX_GPIO_Init+0x40>)
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <MX_GPIO_Init+0x40>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0304 	and.w	r3, r3, #4
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000

08000294 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000298:	b672      	cpsid	i
}
 800029a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800029c:	e7fe      	b.n	800029c <Error_Handler+0x8>
	...

080002a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <HAL_MspInit+0x5c>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a14      	ldr	r2, [pc, #80]	; (80002fc <HAL_MspInit+0x5c>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <HAL_MspInit+0x5c>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <HAL_MspInit+0x5c>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <HAL_MspInit+0x5c>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c8:	61d3      	str	r3, [r2, #28]
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <HAL_MspInit+0x5c>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <HAL_MspInit+0x60>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <HAL_MspInit+0x60>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010000 	.word	0x40010000

08000304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <NMI_Handler+0x4>

0800030a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <HardFault_Handler+0x4>

08000310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000314:	e7fe      	b.n	8000314 <MemManage_Handler+0x4>

08000316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031a:	e7fe      	b.n	800031a <BusFault_Handler+0x4>

0800031c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000320:	e7fe      	b.n	8000320 <UsageFault_Handler+0x4>

08000322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr

0800032e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034a:	f000 f8b5 	bl	80004b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000358:	4802      	ldr	r0, [pc, #8]	; (8000364 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800035a:	f000 fb16 	bl	800098a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000f0c 	.word	0x20000f0c

08000368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000370:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <_sbrk+0x5c>)
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <_sbrk+0x60>)
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <_sbrk+0x64>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d102      	bne.n	800038a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <_sbrk+0x64>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <_sbrk+0x68>)
 8000388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <_sbrk+0x64>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	693a      	ldr	r2, [r7, #16]
 8000394:	429a      	cmp	r2, r3
 8000396:	d207      	bcs.n	80003a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000398:	f006 ff7c 	bl	8007294 <__errno>
 800039c:	4603      	mov	r3, r0
 800039e:	220c      	movs	r2, #12
 80003a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
 80003a6:	e009      	b.n	80003bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <_sbrk+0x64>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <_sbrk+0x64>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4413      	add	r3, r2
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <_sbrk+0x64>)
 80003b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003ba:	68fb      	ldr	r3, [r7, #12]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20005000 	.word	0x20005000
 80003c8:	00000400 	.word	0x00000400
 80003cc:	2000023c 	.word	0x2000023c
 80003d0:	20001418 	.word	0x20001418

080003d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e0:	f7ff fff8 	bl	80003d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003e6:	490c      	ldr	r1, [pc, #48]	; (8000418 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003e8:	4a0c      	ldr	r2, [pc, #48]	; (800041c <LoopFillZerobss+0x16>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a09      	ldr	r2, [pc, #36]	; (8000420 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003fc:	4c09      	ldr	r4, [pc, #36]	; (8000424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040a:	f006 ff49 	bl	80072a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff fea5 	bl	800015c <main>
  bx lr
 8000412:	4770      	bx	lr
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800041c:	08007cbc 	.word	0x08007cbc
  ldr r2, =_sbss
 8000420:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000424:	20001414 	.word	0x20001414

08000428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC1_2_IRQHandler>
	...

0800042c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <HAL_Init+0x28>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <HAL_Init+0x28>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800043c:	2003      	movs	r0, #3
 800043e:	f000 f947 	bl	80006d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000442:	200f      	movs	r0, #15
 8000444:	f000 f808 	bl	8000458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000448:	f7ff ff2a 	bl	80002a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40022000 	.word	0x40022000

08000458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_InitTick+0x54>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_InitTick+0x58>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800046e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000472:	fbb2 f3f3 	udiv	r3, r2, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f95f 	bl	800073a <HAL_SYSTICK_Config>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	e00e      	b.n	80004a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b0f      	cmp	r3, #15
 800048a:	d80a      	bhi.n	80004a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800048c:	2200      	movs	r2, #0
 800048e:	6879      	ldr	r1, [r7, #4]
 8000490:	f04f 30ff 	mov.w	r0, #4294967295
 8000494:	f000 f927 	bl	80006e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000498:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <HAL_InitTick+0x5c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800049e:	2300      	movs	r3, #0
 80004a0:	e000      	b.n	80004a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000004 	.word	0x20000004

080004b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <HAL_IncTick+0x1c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_IncTick+0x20>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	4a03      	ldr	r2, [pc, #12]	; (80004d8 <HAL_IncTick+0x20>)
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000240 	.word	0x20000240

080004dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return uwTick;
 80004e0:	4b02      	ldr	r3, [pc, #8]	; (80004ec <HAL_GetTick+0x10>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	20000240 	.word	0x20000240

080004f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004f8:	f7ff fff0 	bl	80004dc <HAL_GetTick>
 80004fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000508:	d005      	beq.n	8000516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_Delay+0x44>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4413      	add	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000516:	bf00      	nop
 8000518:	f7ff ffe0 	bl	80004dc <HAL_GetTick>
 800051c:	4602      	mov	r2, r0
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	429a      	cmp	r2, r3
 8000526:	d8f7      	bhi.n	8000518 <HAL_Delay+0x28>
  {
  }
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000008 	.word	0x20000008

08000538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f003 0307 	and.w	r3, r3, #7
 8000546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000554:	4013      	ands	r3, r2
 8000556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <__NVIC_SetPriorityGrouping+0x44>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	60d3      	str	r3, [r2, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <__NVIC_GetPriorityGrouping+0x18>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	f003 0307 	and.w	r3, r3, #7
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db0b      	blt.n	80005c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	f003 021f 	and.w	r2, r3, #31
 80005b4:	4906      	ldr	r1, [pc, #24]	; (80005d0 <__NVIC_EnableIRQ+0x34>)
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	095b      	lsrs	r3, r3, #5
 80005bc:	2001      	movs	r0, #1
 80005be:	fa00 f202 	lsl.w	r2, r0, r2
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	e000e100 	.word	0xe000e100

080005d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db0a      	blt.n	80005fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	490c      	ldr	r1, [pc, #48]	; (8000620 <__NVIC_SetPriority+0x4c>)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	440b      	add	r3, r1
 80005f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005fc:	e00a      	b.n	8000614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4908      	ldr	r1, [pc, #32]	; (8000624 <__NVIC_SetPriority+0x50>)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	3b04      	subs	r3, #4
 800060c:	0112      	lsls	r2, r2, #4
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	440b      	add	r3, r1
 8000612:	761a      	strb	r2, [r3, #24]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000628:	b480      	push	{r7}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	f1c3 0307 	rsb	r3, r3, #7
 8000642:	2b04      	cmp	r3, #4
 8000644:	bf28      	it	cs
 8000646:	2304      	movcs	r3, #4
 8000648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3304      	adds	r3, #4
 800064e:	2b06      	cmp	r3, #6
 8000650:	d902      	bls.n	8000658 <NVIC_EncodePriority+0x30>
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3b03      	subs	r3, #3
 8000656:	e000      	b.n	800065a <NVIC_EncodePriority+0x32>
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	f04f 32ff 	mov.w	r2, #4294967295
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	43da      	mvns	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	401a      	ands	r2, r3
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000670:	f04f 31ff 	mov.w	r1, #4294967295
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43d9      	mvns	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	4313      	orrs	r3, r2
         );
}
 8000682:	4618      	mov	r0, r3
 8000684:	3724      	adds	r7, #36	; 0x24
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800069c:	d301      	bcc.n	80006a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2301      	movs	r3, #1
 80006a0:	e00f      	b.n	80006c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <SysTick_Config+0x40>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006aa:	210f      	movs	r1, #15
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f7ff ff90 	bl	80005d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <SysTick_Config+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <SysTick_Config+0x40>)
 80006bc:	2207      	movs	r2, #7
 80006be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff2d 	bl	8000538 <__NVIC_SetPriorityGrouping>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	4603      	mov	r3, r0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f8:	f7ff ff42 	bl	8000580 <__NVIC_GetPriorityGrouping>
 80006fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	6978      	ldr	r0, [r7, #20]
 8000704:	f7ff ff90 	bl	8000628 <NVIC_EncodePriority>
 8000708:	4602      	mov	r2, r0
 800070a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff5f 	bl	80005d4 <__NVIC_SetPriority>
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff35 	bl	800059c <__NVIC_EnableIRQ>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ffa2 	bl	800068c <SysTick_Config>
 8000748:	4603      	mov	r3, r0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d101      	bne.n	8000764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	e0e8      	b.n	8000936 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f006 fae1 	bl	8006d40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2203      	movs	r2, #3
 8000782:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f9f6 	bl	8002b82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3304      	adds	r3, #4
 800079e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007a0:	f002 f9cc 	bl	8002b3c <USB_CoreInit>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2202      	movs	r2, #2
 80007ae:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0bf      	b.n	8000936 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f9fa 	bl	8002bb6 <USB_SetCurrentMode>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2202      	movs	r2, #2
 80007cc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e0b0      	b.n	8000936 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e03e      	b.n	8000858 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007da:	7bfa      	ldrb	r2, [r7, #15]
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3311      	adds	r3, #17
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	440b      	add	r3, r1
 80007fc:	3310      	adds	r3, #16
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	3313      	adds	r3, #19
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	440b      	add	r3, r1
 8000824:	3320      	adds	r3, #32
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	440b      	add	r3, r1
 8000838:	3324      	adds	r3, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	440b      	add	r3, r1
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	3301      	adds	r3, #1
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3bb      	bcc.n	80007da <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e044      	b.n	80008f2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	f203 1351 	addw	r3, r3, #337	; 0x151
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	f203 1353 	addw	r3, r3, #339	; 0x153
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	440b      	add	r3, r1
 80008b8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008c0:	7bfa      	ldrb	r2, [r7, #15]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	3301      	adds	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	791b      	ldrb	r3, [r3, #4]
 80008f6:	7bfa      	ldrb	r2, [r7, #15]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d3b5      	bcc.n	8000868 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3304      	adds	r3, #4
 8000904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000906:	f002 f962 	bl	8002bce <USB_DevInit>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d005      	beq.n	800091c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2202      	movs	r2, #2
 8000914:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	e00c      	b.n	8000936 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f004 fbe1 	bl	80050f6 <USB_DevDisconnect>

  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800094c:	2b01      	cmp	r3, #1
 800094e:	d101      	bne.n	8000954 <HAL_PCD_Start+0x16>
 8000950:	2302      	movs	r3, #2
 8000952:	e016      	b.n	8000982 <HAL_PCD_Start+0x44>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f8f8 	bl	8002b56 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000966:	2101      	movs	r1, #1
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f006 fc5c 	bl	8007226 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fbb5 	bl	80050e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b088      	sub	sp, #32
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fbb7 	bl	800510a <USB_ReadInterrupts>
 800099c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fb1a 	bl	8000fe2 <PCD_EP_ISR_Handler>

    return;
 80009ae:	e119      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d013      	beq.n	80009e2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009cc:	b292      	uxth	r2, r2
 80009ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f006 fa2f 	bl	8006e36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f905 	bl	8000bea <HAL_PCD_SetAddress>

    return;
 80009e0:	e100      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00c      	beq.n	8000a06 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009fe:	b292      	uxth	r2, r2
 8000a00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a04:	e0ee      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00c      	beq.n	8000a2a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a22:	b292      	uxth	r2, r2
 8000a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a28:	e0dc      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d027      	beq.n	8000a84 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	b292      	uxth	r2, r2
 8000a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 0208 	bic.w	r2, r2, #8
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f006 fa1f 	bl	8006ea8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a7c:	b292      	uxth	r2, r2
 8000a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a82:	e0af      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 8083 	beq.w	8000b96 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	77fb      	strb	r3, [r7, #31]
 8000a94:	e010      	b.n	8000ab8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	441a      	add	r2, r3
 8000aa2:	7ffb      	ldrb	r3, [r7, #31]
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3320      	adds	r3, #32
 8000aac:	443b      	add	r3, r7
 8000aae:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000ab2:	7ffb      	ldrb	r3, [r7, #31]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	77fb      	strb	r3, [r7, #31]
 8000ab8:	7ffb      	ldrb	r3, [r7, #31]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	d9eb      	bls.n	8000a96 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f042 0201 	orr.w	r2, r2, #1
 8000ad0:	b292      	uxth	r2, r2
 8000ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 0201 	bic.w	r2, r2, #1
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000aee:	bf00      	nop
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f6      	beq.n	8000af0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	77fb      	strb	r3, [r7, #31]
 8000b1e:	e00f      	b.n	8000b40 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000b20:	7ffb      	ldrb	r3, [r7, #31]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	4611      	mov	r1, r2
 8000b28:	7ffa      	ldrb	r2, [r7, #31]
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	440a      	add	r2, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	3320      	adds	r3, #32
 8000b32:	443b      	add	r3, r7
 8000b34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000b38:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	77fb      	strb	r3, [r7, #31]
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	2b07      	cmp	r3, #7
 8000b44:	d9ec      	bls.n	8000b20 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0208 	orr.w	r2, r2, #8
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b70:	b292      	uxth	r2, r2
 8000b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 0204 	orr.w	r2, r2, #4
 8000b88:	b292      	uxth	r2, r2
 8000b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f006 f970 	bl	8006e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b94:	e026      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00f      	beq.n	8000bc0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f006 f92e 	bl	8006e1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000bbe:	e011      	b.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00c      	beq.n	8000be4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bdc:	b292      	uxth	r2, r2
 8000bde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000be2:	bf00      	nop
  }
}
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d101      	bne.n	8000c04 <HAL_PCD_SetAddress+0x1a>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e012      	b.n	8000c2a <HAL_PCD_SetAddress+0x40>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	78fa      	ldrb	r2, [r7, #3]
 8000c10:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	78fa      	ldrb	r2, [r7, #3]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fa4e 	bl	80050bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4603      	mov	r3, r0
 8000c42:	70fb      	strb	r3, [r7, #3]
 8000c44:	460b      	mov	r3, r1
 8000c46:	803b      	strh	r3, [r7, #0]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da0e      	bge.n	8000c76 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	f003 0207 	and.w	r2, r3, #7
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	3310      	adds	r3, #16
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2201      	movs	r2, #1
 8000c72:	705a      	strb	r2, [r3, #1]
 8000c74:	e00e      	b.n	8000c94 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	f003 0207 	and.w	r2, r3, #7
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000ca0:	883a      	ldrh	r2, [r7, #0]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	78ba      	ldrb	r2, [r7, #2]
 8000caa:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000cac:	78bb      	ldrb	r3, [r7, #2]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d102      	bne.n	8000cb8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_PCD_EP_Open+0x94>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e00e      	b.n	8000ce4 <HAL_PCD_EP_Open+0xb2>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68f9      	ldr	r1, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 ff97 	bl	8002c08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da0e      	bge.n	8000d1e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f003 0207 	and.w	r2, r3, #7
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	3310      	adds	r3, #16
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	705a      	strb	r2, [r3, #1]
 8000d1c:	e00e      	b.n	8000d3c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	f003 0207 	and.w	r2, r3, #7
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_PCD_EP_Close+0x6a>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e00e      	b.n	8000d74 <HAL_PCD_EP_Close+0x88>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68f9      	ldr	r1, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fb0f 	bl	8003388 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	f003 0207 	and.w	r2, r3, #7
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4413      	add	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2200      	movs	r2, #0
 8000dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dbc:	7afb      	ldrb	r3, [r7, #11]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6979      	ldr	r1, [r7, #20]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fcc6 	bl	8003760 <USB_EPStartXfer>

  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	f003 0207 	and.w	r2, r3, #7
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000e00:	681b      	ldr	r3, [r3, #0]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	f003 0207 	and.w	r2, r3, #7
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	3310      	adds	r3, #16
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2201      	movs	r2, #1
 8000e56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e58:	7afb      	ldrb	r3, [r7, #11]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6979      	ldr	r1, [r7, #20]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fc78 	bl	8003760 <USB_EPStartXfer>

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	460b      	mov	r3, r1
 8000e84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	7912      	ldrb	r2, [r2, #4]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e04c      	b.n	8000f32 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	da0e      	bge.n	8000ebe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	f003 0207 	and.w	r2, r3, #7
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	3310      	adds	r3, #16
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	705a      	strb	r2, [r3, #1]
 8000ebc:	e00c      	b.n	8000ed8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2201      	movs	r2, #1
 8000edc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d101      	bne.n	8000ef8 <HAL_PCD_EP_SetStall+0x7e>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	e01c      	b.n	8000f32 <HAL_PCD_EP_SetStall+0xb8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 ffdb 	bl	8004ec2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d108      	bne.n	8000f28 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f004 f900 	bl	8005128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	7912      	ldrb	r2, [r2, #4]
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e040      	b.n	8000fda <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da0e      	bge.n	8000f7e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	f003 0207 	and.w	r2, r3, #7
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	3310      	adds	r3, #16
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	705a      	strb	r2, [r3, #1]
 8000f7c:	e00e      	b.n	8000f9c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f7e:	78fb      	ldrb	r3, [r7, #3]
 8000f80:	f003 0207 	and.w	r2, r3, #7
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_PCD_EP_ClrStall+0x82>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e00e      	b.n	8000fda <HAL_PCD_EP_ClrStall+0xa0>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 ffc9 	bl	8004f62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b096      	sub	sp, #88	; 0x58
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fea:	e3bc      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ff8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001006:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 8176 	bne.w	80012fc <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	2b00      	cmp	r3, #0
 800101a:	d14f      	bne.n	80010bc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800103c:	b29b      	uxth	r3, r3
 800103e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3310      	adds	r3, #16
 8001044:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	3302      	adds	r3, #2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	4413      	add	r3, r2
 8001064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800106e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001070:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	441a      	add	r2, r3
 800107c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001080:	2100      	movs	r1, #0
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f005 feaf 	bl	8006de6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7b5b      	ldrb	r3, [r3, #13]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8369 	beq.w	8001766 <PCD_EP_ISR_Handler+0x784>
 8001094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	2b00      	cmp	r3, #0
 800109a:	f040 8364 	bne.w	8001766 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7b5b      	ldrb	r3, [r3, #13]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b292      	uxth	r2, r2
 80010b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	735a      	strb	r2, [r3, #13]
 80010ba:	e354      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010c2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80010ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d034      	beq.n	8001144 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	3306      	adds	r3, #6
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001112:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001116:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001118:	b29b      	uxth	r3, r3
 800111a:	f004 f855 	bl	80051c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	b29a      	uxth	r2, r3
 8001126:	f640 738f 	movw	r3, #3983	; 0xf8f
 800112a:	4013      	ands	r3, r2
 800112c:	823b      	strh	r3, [r7, #16]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	8a3a      	ldrh	r2, [r7, #16]
 8001134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001138:	b292      	uxth	r2, r2
 800113a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f005 fe25 	bl	8006d8c <HAL_PCD_SetupStageCallback>
 8001142:	e310      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001144:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001148:	2b00      	cmp	r3, #0
 800114a:	f280 830c 	bge.w	8001766 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	b29a      	uxth	r2, r3
 8001156:	f640 738f 	movw	r3, #3983	; 0xf8f
 800115a:	4013      	ands	r3, r2
 800115c:	83fb      	strh	r3, [r7, #30]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	8bfa      	ldrh	r2, [r7, #30]
 8001164:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001168:	b292      	uxth	r2, r2
 800116a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	3306      	adds	r3, #6
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	4413      	add	r3, r2
 800118a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001196:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d019      	beq.n	80011d4 <PCD_EP_ISR_Handler+0x1f2>
 80011a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d015      	beq.n	80011d4 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ae:	6959      	ldr	r1, [r3, #20]
 80011b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80011b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f004 f805 	bl	80051c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80011be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	441a      	add	r2, r3
 80011c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80011cc:	2100      	movs	r1, #0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f005 fdee 	bl	8006db0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80011de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 82bd 	bne.w	8001766 <PCD_EP_ISR_Handler+0x784>
 80011ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80011f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80011f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80011f8:	f000 82b5 	beq.w	8001766 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4413      	add	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001226:	b29a      	uxth	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b3e      	cmp	r3, #62	; 0x3e
 8001232:	d91d      	bls.n	8001270 <PCD_EP_ISR_Handler+0x28e>
 8001234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
 800123c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <PCD_EP_ISR_Handler+0x26c>
 8001248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800124a:	3b01      	subs	r3, #1
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29a      	uxth	r2, r3
 8001254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001256:	b29b      	uxth	r3, r3
 8001258:	029b      	lsls	r3, r3, #10
 800125a:	b29b      	uxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001268:	b29a      	uxth	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	e026      	b.n	80012be <PCD_EP_ISR_Handler+0x2dc>
 8001270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10a      	bne.n	800128e <PCD_EP_ISR_Handler+0x2ac>
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001286:	b29a      	uxth	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	e017      	b.n	80012be <PCD_EP_ISR_Handler+0x2dc>
 800128e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	085b      	lsrs	r3, r3, #1
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
 8001296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <PCD_EP_ISR_Handler+0x2c6>
 80012a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a4:	3301      	adds	r3, #1
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ce:	827b      	strh	r3, [r7, #18]
 80012d0:	8a7b      	ldrh	r3, [r7, #18]
 80012d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012d6:	827b      	strh	r3, [r7, #18]
 80012d8:	8a7b      	ldrh	r3, [r7, #18]
 80012da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012de:	827b      	strh	r3, [r7, #18]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	8a7b      	ldrh	r3, [r7, #18]
 80012e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	8013      	strh	r3, [r2, #0]
 80012fa:	e234      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001310:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001314:	2b00      	cmp	r3, #0
 8001316:	f280 80fc 	bge.w	8001512 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001330:	4013      	ands	r3, r2
 8001332:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800134c:	b292      	uxth	r2, r2
 800134e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001350:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001368:	7b1b      	ldrb	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d125      	bne.n	80013ba <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	3306      	adds	r3, #6
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	4413      	add	r3, r2
 800138c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001396:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800139a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8092 	beq.w	80014c8 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013aa:	6959      	ldr	r1, [r3, #20]
 80013ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ae:	88da      	ldrh	r2, [r3, #6]
 80013b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013b4:	f003 ff08 	bl	80051c8 <USB_ReadPMA>
 80013b8:	e086      	b.n	80014c8 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013bc:	78db      	ldrb	r3, [r3, #3]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d10a      	bne.n	80013d8 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013c6:	461a      	mov	r2, r3
 80013c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9d9 	bl	8001782 <HAL_PCD_EP_DB_Receive>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80013d6:	e077      	b.n	80014c8 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	441a      	add	r2, r3
 8001404:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800140c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001418:	b29b      	uxth	r3, r3
 800141a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d024      	beq.n	8001480 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	3302      	adds	r3, #2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001462:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001466:	2b00      	cmp	r3, #0
 8001468:	d02e      	beq.n	80014c8 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001470:	6959      	ldr	r1, [r3, #20]
 8001472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001474:	891a      	ldrh	r2, [r3, #8]
 8001476:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800147a:	f003 fea5 	bl	80051c8 <USB_ReadPMA>
 800147e:	e023      	b.n	80014c8 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001488:	b29b      	uxth	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4413      	add	r3, r2
 8001494:	3306      	adds	r3, #6
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80014ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	6959      	ldr	r1, [r3, #20]
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	895a      	ldrh	r2, [r3, #10]
 80014c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014c4:	f003 fe80 	bl	80051c8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014d0:	441a      	add	r2, r3
 80014d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014de:	441a      	add	r2, r3
 80014e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <PCD_EP_ISR_Handler+0x516>
 80014ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80014f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d206      	bcs.n	8001506 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f005 fc56 	bl	8006db0 <HAL_PCD_DataOutStageCallback>
 8001504:	e005      	b.n	8001512 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f927 	bl	8003760 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001512:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8123 	beq.w	8001766 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8001520:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	3310      	adds	r3, #16
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800154a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800154e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	441a      	add	r2, r3
 8001560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800156c:	b29b      	uxth	r3, r3
 800156e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	2b01      	cmp	r3, #1
 8001576:	f040 80a2 	bne.w	80016be <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 800157a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8093 	beq.w	80016b0 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800158a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d046      	beq.n	8001624 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d126      	bne.n	80015ec <PCD_EP_ISR_Handler+0x60a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	4413      	add	r3, r2
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	011a      	lsls	r2, r3, #4
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	4413      	add	r3, r2
 80015c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80015c4:	623b      	str	r3, [r7, #32]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	801a      	strh	r2, [r3, #0]
 80015ea:	e061      	b.n	80016b0 <PCD_EP_ISR_Handler+0x6ce>
 80015ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d15d      	bne.n	80016b0 <PCD_EP_ISR_Handler+0x6ce>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	4413      	add	r3, r2
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	011a      	lsls	r2, r3, #4
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	4413      	add	r3, r2
 8001616:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	e045      	b.n	80016b0 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800162a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d126      	bne.n	8001680 <PCD_EP_ISR_Handler+0x69e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001646:	4413      	add	r3, r2
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
 800164a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	011a      	lsls	r2, r3, #4
 8001650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001652:	4413      	add	r3, r2
 8001654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001664:	b29a      	uxth	r2, r3
 8001666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001678:	b29a      	uxth	r2, r3
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	e017      	b.n	80016b0 <PCD_EP_ISR_Handler+0x6ce>
 8001680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d113      	bne.n	80016b0 <PCD_EP_ISR_Handler+0x6ce>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001696:	4413      	add	r3, r2
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	011a      	lsls	r2, r3, #4
 80016a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a2:	4413      	add	r3, r2
 80016a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80016aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ac:	2200      	movs	r2, #0
 80016ae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f005 fb95 	bl	8006de6 <HAL_PCD_DataInStageCallback>
 80016bc:	e053      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80016be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d146      	bne.n	8001758 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	3302      	adds	r3, #2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80016f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016fe:	429a      	cmp	r2, r3
 8001700:	d907      	bls.n	8001712 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800170a:	1ad2      	subs	r2, r2, r3
 800170c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	e002      	b.n	8001718 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8001712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d106      	bne.n	800172e <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f005 fb5d 	bl	8006de6 <HAL_PCD_DataInStageCallback>
 800172c:	e01b      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001736:	441a      	add	r2, r3
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800173c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173e:	69da      	ldr	r2, [r3, #28]
 8001740:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001744:	441a      	add	r2, r3
 8001746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001748:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001750:	4618      	mov	r0, r3
 8001752:	f002 f805 	bl	8003760 <USB_EPStartXfer>
 8001756:	e006      	b.n	8001766 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001758:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800175c:	461a      	mov	r2, r3
 800175e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f91b 	bl	800199c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176e:	b29b      	uxth	r3, r3
 8001770:	b21b      	sxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	f6ff ac3a 	blt.w	8000fec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3758      	adds	r7, #88	; 0x58
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b088      	sub	sp, #32
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	4613      	mov	r3, r2
 800178e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d07e      	beq.n	8001898 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	3302      	adds	r3, #2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	8b7b      	ldrh	r3, [r7, #26]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d306      	bcc.n	80017dc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	8b7b      	ldrh	r3, [r7, #26]
 80017d4:	1ad2      	subs	r2, r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	e002      	b.n	80017e2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d123      	bne.n	8001832 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001804:	833b      	strh	r3, [r7, #24]
 8001806:	8b3b      	ldrh	r3, [r7, #24]
 8001808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800180c:	833b      	strh	r3, [r7, #24]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	441a      	add	r2, r3
 800181c:	8b3b      	ldrh	r3, [r7, #24]
 800181e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182e:	b29b      	uxth	r3, r3
 8001830:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01f      	beq.n	800187c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001856:	82fb      	strh	r3, [r7, #22]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	441a      	add	r2, r3
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001878:	b29b      	uxth	r3, r3
 800187a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800187c:	8b7b      	ldrh	r3, [r7, #26]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6959      	ldr	r1, [r3, #20]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	891a      	ldrh	r2, [r3, #8]
 8001890:	8b7b      	ldrh	r3, [r7, #26]
 8001892:	f003 fc99 	bl	80051c8 <USB_ReadPMA>
 8001896:	e07c      	b.n	8001992 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	3306      	adds	r3, #6
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d306      	bcc.n	80018da <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	8b7b      	ldrh	r3, [r7, #26]
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	619a      	str	r2, [r3, #24]
 80018d8:	e002      	b.n	80018e0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d123      	bne.n	8001930 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001902:	83fb      	strh	r3, [r7, #30]
 8001904:	8bfb      	ldrh	r3, [r7, #30]
 8001906:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800190a:	83fb      	strh	r3, [r7, #30]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	8bfb      	ldrh	r3, [r7, #30]
 800191c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	b29b      	uxth	r3, r3
 800192e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11f      	bne.n	800197a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001954:	83bb      	strh	r3, [r7, #28]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	441a      	add	r2, r3
 8001964:	8bbb      	ldrh	r3, [r7, #28]
 8001966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800196a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800196e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001976:	b29b      	uxth	r3, r3
 8001978:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800197a:	8b7b      	ldrh	r3, [r7, #26]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6959      	ldr	r1, [r3, #20]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	895a      	ldrh	r2, [r3, #10]
 800198c:	8b7b      	ldrh	r3, [r7, #26]
 800198e:	f003 fc1b 	bl	80051c8 <USB_ReadPMA>
    }
  }

  return count;
 8001992:	8b7b      	ldrh	r3, [r7, #26]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0a4      	sub	sp, #144	; 0x90
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	4613      	mov	r3, r2
 80019a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 81dd 	beq.w	8001d70 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019be:	b29b      	uxth	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	3302      	adds	r3, #2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d907      	bls.n	80019fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80019f6:	1ad2      	subs	r2, r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	e002      	b.n	8001a04 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 80b9 	bne.w	8001b80 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d126      	bne.n	8001a64 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	011a      	lsls	r2, r3, #4
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	4413      	add	r3, r2
 8001a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	801a      	strh	r2, [r3, #0]
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	e01a      	b.n	8001a9a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	785b      	ldrb	r3, [r3, #1]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d116      	bne.n	8001a9a <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	4413      	add	r3, r2
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	011a      	lsls	r2, r3, #4
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
 8001a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a96:	2200      	movs	r2, #0
 8001a98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d126      	bne.n	8001af6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	4413      	add	r3, r2
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	011a      	lsls	r2, r3, #4
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	801a      	strh	r2, [r3, #0]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	801a      	strh	r2, [r3, #0]
 8001af4:	e017      	b.n	8001b26 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d113      	bne.n	8001b26 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	4413      	add	r3, r2
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	011a      	lsls	r2, r3, #4
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	4413      	add	r3, r2
 8001b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	2200      	movs	r2, #0
 8001b24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f005 f95a 	bl	8006de6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 82fc 	beq.w	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b58:	82fb      	strh	r3, [r7, #22]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	441a      	add	r2, r3
 8001b68:	8afb      	ldrh	r3, [r7, #22]
 8001b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	8013      	strh	r3, [r2, #0]
 8001b7e:	e2da      	b.n	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d021      	beq.n	8001bce <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	441a      	add	r2, r3
 8001bb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 82ae 	bne.w	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001be2:	441a      	add	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001bf0:	441a      	add	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	6a1a      	ldr	r2, [r3, #32]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d30b      	bcc.n	8001c1a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c12:	1ad2      	subs	r2, r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	621a      	str	r2, [r3, #32]
 8001c18:	e017      	b.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001c22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c32:	e00a      	b.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d165      	bne.n	8001d1e <HAL_PCD_EP_DB_Transmit+0x382>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c66:	4413      	add	r3, r2
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	011a      	lsls	r2, r3, #4
 8001c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c72:	4413      	add	r3, r2
 8001c74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c90:	d91d      	bls.n	8001cce <HAL_PCD_EP_DB_Transmit+0x332>
 8001c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_EP_DB_Transmit+0x310>
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	e044      	b.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <HAL_PCD_EP_DB_Transmit+0x350>
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	e035      	b.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d02:	3301      	adds	r3, #1
 8001d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	029b      	lsls	r3, r3, #10
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	e01c      	b.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d118      	bne.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3a:	4413      	add	r3, r2
 8001d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	011a      	lsls	r2, r3, #4
 8001d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d46:	4413      	add	r3, r2
 8001d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d56:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6959      	ldr	r1, [r3, #20]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	891a      	ldrh	r2, [r3, #8]
 8001d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f003 f9e8 	bl	800513e <USB_WritePMA>
 8001d6e:	e1e2      	b.n	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	3306      	adds	r3, #6
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d307      	bcc.n	8001db8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001db0:	1ad2      	subs	r2, r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	e002      	b.n	8001dbe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80c0 	bne.w	8001f48 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d126      	bne.n	8001e1e <HAL_PCD_EP_DB_Transmit+0x482>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001de4:	4413      	add	r3, r2
 8001de6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	011a      	lsls	r2, r3, #4
 8001dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001df0:	4413      	add	r3, r2
 8001df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e1a:	801a      	strh	r2, [r3, #0]
 8001e1c:	e01a      	b.n	8001e54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	785b      	ldrb	r3, [r3, #1]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d116      	bne.n	8001e54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e3a:	4413      	add	r3, r2
 8001e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	011a      	lsls	r2, r3, #4
 8001e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e46:	4413      	add	r3, r2
 8001e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e50:	2200      	movs	r2, #0
 8001e52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	677b      	str	r3, [r7, #116]	; 0x74
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d12b      	bne.n	8001eba <HAL_PCD_EP_DB_Transmit+0x51e>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e76:	4413      	add	r3, r2
 8001e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	011a      	lsls	r2, r3, #4
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	4413      	add	r3, r2
 8001e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9e:	801a      	strh	r2, [r3, #0]
 8001ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	e017      	b.n	8001eea <HAL_PCD_EP_DB_Transmit+0x54e>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d113      	bne.n	8001eea <HAL_PCD_EP_DB_Transmit+0x54e>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed0:	4413      	add	r3, r2
 8001ed2:	677b      	str	r3, [r7, #116]	; 0x74
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	011a      	lsls	r2, r3, #4
 8001eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001edc:	4413      	add	r3, r2
 8001ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f004 ff78 	bl	8006de6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 811a 	bne.w	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8013      	strh	r3, [r2, #0]
 8001f46:	e0f6      	b.n	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d121      	bne.n	8001f96 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	441a      	add	r2, r3
 8001f7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	f040 80ca 	bne.w	8002136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001faa:	441a      	add	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	69da      	ldr	r2, [r3, #28]
 8001fb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fb8:	441a      	add	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d30b      	bcc.n	8001fe2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	621a      	str	r2, [r3, #32]
 8001fe0:	e017      	b.n	8002012 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001fea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ffa:	e00a      	b.n	8002012 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	657b      	str	r3, [r7, #84]	; 0x54
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	785b      	ldrb	r3, [r3, #1]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d165      	bne.n	80020ec <HAL_PCD_EP_DB_Transmit+0x750>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002034:	4413      	add	r3, r2
 8002036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	011a      	lsls	r2, r3, #4
 800203e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002040:	4413      	add	r3, r2
 8002042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002046:	65bb      	str	r3, [r7, #88]	; 0x58
 8002048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002052:	b29a      	uxth	r2, r3
 8002054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800205c:	2b3e      	cmp	r3, #62	; 0x3e
 800205e:	d91d      	bls.n	800209c <HAL_PCD_EP_DB_Transmit+0x700>
 8002060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	66bb      	str	r3, [r7, #104]	; 0x68
 8002068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_PCD_EP_DB_Transmit+0x6de>
 8002074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002076:	3b01      	subs	r3, #1
 8002078:	66bb      	str	r3, [r7, #104]	; 0x68
 800207a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29a      	uxth	r2, r3
 8002080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002082:	b29b      	uxth	r3, r3
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	b29b      	uxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002094:	b29a      	uxth	r2, r3
 8002096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	e041      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0x784>
 800209c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <HAL_PCD_EP_DB_Transmit+0x71e>
 80020a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b6:	801a      	strh	r2, [r3, #0]
 80020b8:	e032      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0x784>
 80020ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80020c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_PCD_EP_DB_Transmit+0x738>
 80020ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d0:	3301      	adds	r3, #1
 80020d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80020d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020dc:	b29b      	uxth	r3, r3
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	e019      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0x784>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d115      	bne.n	8002120 <HAL_PCD_EP_DB_Transmit+0x784>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002102:	4413      	add	r3, r2
 8002104:	657b      	str	r3, [r7, #84]	; 0x54
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	011a      	lsls	r2, r3, #4
 800210c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210e:	4413      	add	r3, r2
 8002110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002114:	653b      	str	r3, [r7, #80]	; 0x50
 8002116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800211a:	b29a      	uxth	r2, r3
 800211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6959      	ldr	r1, [r3, #20]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	895a      	ldrh	r2, [r3, #10]
 800212c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002130:	b29b      	uxth	r3, r3
 8002132:	f003 f804 	bl	800513e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800214c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002150:	82bb      	strh	r3, [r7, #20]
 8002152:	8abb      	ldrh	r3, [r7, #20]
 8002154:	f083 0310 	eor.w	r3, r3, #16
 8002158:	82bb      	strh	r3, [r7, #20]
 800215a:	8abb      	ldrh	r3, [r7, #20]
 800215c:	f083 0320 	eor.w	r3, r3, #32
 8002160:	82bb      	strh	r3, [r7, #20]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	8abb      	ldrh	r3, [r7, #20]
 8002172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3790      	adds	r7, #144	; 0x90
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	817b      	strh	r3, [r7, #10]
 800219e:	4613      	mov	r3, r2
 80021a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	f003 0207 	and.w	r2, r3, #7
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	3310      	adds	r3, #16
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e009      	b.n	80021da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021c6:	897a      	ldrh	r2, [r7, #10]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021da:	893b      	ldrh	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	80da      	strh	r2, [r3, #6]
 80021ee:	e00b      	b.n	8002208 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2201      	movs	r2, #1
 80021f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b29a      	uxth	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e272      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002234:	4b92      	ldr	r3, [pc, #584]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00c      	beq.n	800225a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002240:	4b8f      	ldr	r3, [pc, #572]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d112      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
 800224c:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d06c      	beq.n	8002340 <HAL_RCC_OscConfig+0x12c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d168      	bne.n	8002340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e24c      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x76>
 800227c:	4b80      	ldr	r3, [pc, #512]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a7f      	ldr	r2, [pc, #508]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e02e      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x98>
 8002292:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7a      	ldr	r2, [pc, #488]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b78      	ldr	r3, [pc, #480]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a77      	ldr	r2, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0xbc>
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a71      	ldr	r2, [pc, #452]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b6f      	ldr	r3, [pc, #444]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6e      	ldr	r2, [pc, #440]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022d0:	4b6b      	ldr	r3, [pc, #428]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a67      	ldr	r2, [pc, #412]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe f8f4 	bl	80004dc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe f8f0 	bl	80004dc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e200      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xe4>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe f8e0 	bl	80004dc <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe f8dc 	bl	80004dc <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1ec      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x10c>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d063      	beq.n	8002416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800235a:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1c0      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4939      	ldr	r1, [pc, #228]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	e03a      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe f895 	bl	80004dc <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe f891 	bl	80004dc <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1a1      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4927      	ldr	r1, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe f874 	bl	80004dc <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe f870 	bl	80004dc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e180      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03a      	beq.n	8002498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe f854 	bl	80004dc <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe f850 	bl	80004dc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e160      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f000 fa9c 	bl	8002994 <RCC_Delay>
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7fe f83a 	bl	80004dc <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe f836 	bl	80004dc <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d908      	bls.n	800248c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e146      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	42420000 	.word	0x42420000
 8002488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b92      	ldr	r3, [pc, #584]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e9      	bne.n	800246c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a6 	beq.w	80025f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a87      	ldr	r2, [pc, #540]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b85      	ldr	r3, [pc, #532]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fd fff7 	bl	80004dc <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7fd fff3 	bl	80004dc <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e103      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b75      	ldr	r3, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x4c8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x312>
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e02d      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x334>
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	e01c      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x356>
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a5d      	ldr	r2, [pc, #372]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 800256a:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b58      	ldr	r3, [pc, #352]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fd ffa7 	bl	80004dc <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fd ffa3 	bl	80004dc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0b1      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCC_OscConfig+0x37e>
 80025b4:	e014      	b.n	80025e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fd ff91 	bl	80004dc <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fd ff8d 	bl	80004dc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e09b      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8087 	beq.w	800270a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d061      	beq.n	80026cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d146      	bne.n	800269e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fd ff61 	bl	80004dc <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fd ff5d 	bl	80004dc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e06d      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4921      	ldr	r1, [pc, #132]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a19      	ldr	r1, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	430b      	orrs	r3, r1
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fd ff31 	bl	80004dc <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fd ff2d 	bl	80004dc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x46a>
 800269c:	e035      	b.n	800270a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_OscConfig+0x4cc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fd ff1a 	bl	80004dc <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fd ff16 	bl	80004dc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e026      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x498>
 80026ca:	e01e      	b.n	800270a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e019      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40007000 	.word	0x40007000
 80026e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x500>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d0      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d910      	bls.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4965      	ldr	r1, [pc, #404]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800277e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d040      	beq.n	8002838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e073      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e06b      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4936      	ldr	r1, [pc, #216]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002808:	f7fd fe68 	bl	80004dc <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fd fe64 	bl	80004dc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e053      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 020c 	and.w	r2, r3, #12
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	429a      	cmp	r2, r3
 8002836:	d1eb      	bne.n	8002810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d210      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4922      	ldr	r1, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1cc>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fdc6 	bl	8000458 <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08007c5c 	.word	0x08007c5c
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_GetSysClockFreq+0x94>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b04      	cmp	r3, #4
 8002914:	d002      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x30>
 8002916:	2b08      	cmp	r3, #8
 8002918:	d003      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x36>
 800291a:	e027      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_GetSysClockFreq+0x98>)
 800291e:	613b      	str	r3, [r7, #16]
      break;
 8002920:	e027      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	0c9b      	lsrs	r3, r3, #18
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d010      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_RCC_GetSysClockFreq+0x94>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0c5b      	lsrs	r3, r3, #17
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <HAL_RCC_GetSysClockFreq+0x98>)
 800294e:	fb03 f202 	mul.w	r2, r3, r2
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e004      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	613b      	str	r3, [r7, #16]
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0x98>)
 800296e:	613b      	str	r3, [r7, #16]
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	693b      	ldr	r3, [r7, #16]
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	08007c6c 	.word	0x08007c6c
 800298c:	08007c7c 	.word	0x08007c7c
 8002990:	003d0900 	.word	0x003d0900

08002994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <RCC_Delay+0x34>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <RCC_Delay+0x38>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b0:	bf00      	nop
  }
  while (Delay --);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e5a      	subs	r2, r3, #1
 80029b6:	60fa      	str	r2, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f9      	bne.n	80029b0 <RCC_Delay+0x1c>
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000000 	.word	0x20000000
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d07d      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029ec:	2300      	movs	r3, #0
 80029ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a14:	2301      	movs	r3, #1
 8002a16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d118      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a24:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a30:	f7fd fd54 	bl	80004dc <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fd fd50 	bl	80004dc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e06d      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02e      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d027      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a8a:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d014      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fd fd1f 	bl	80004dc <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fd fd1b 	bl	80004dc <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e036      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ee      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4917      	ldr	r1, [pc, #92]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	490b      	ldr	r1, [pc, #44]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4904      	ldr	r1, [pc, #16]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	42420440 	.word	0x42420440

08002b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	4638      	mov	r0, r7
 8002b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b66:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b8a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	4638      	mov	r0, r7
 8002bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b09d      	sub	sp, #116	; 0x74
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	78db      	ldrb	r3, [r3, #3]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d81f      	bhi.n	8002c7a <USB_ActivateEndpoint+0x72>
 8002c3a:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <USB_ActivateEndpoint+0x38>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c6d 	.word	0x08002c6d
 8002c48:	08002c83 	.word	0x08002c83
 8002c4c:	08002c5f 	.word	0x08002c5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c5c:	e012      	b.n	8002c84 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c5e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c62:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c6a:	e00b      	b.n	8002c84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002c78:	e004      	b.n	8002c84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002c80:	e000      	b.n	8002c84 <USB_ActivateEndpoint+0x7c>
      break;
 8002c82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	7b1b      	ldrb	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 8178 	bne.w	8002fe6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8084 	beq.w	8002e08 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	4413      	add	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	011a      	lsls	r2, r3, #4
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	88db      	ldrh	r3, [r3, #6]
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	827b      	strh	r3, [r7, #18]
 8002d42:	8a7b      	ldrh	r3, [r7, #18]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <USB_ActivateEndpoint+0x17c>
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	823b      	strh	r3, [r7, #16]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	8a3b      	ldrh	r3, [r7, #16]
 8002d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d020      	beq.n	8002dce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da2:	81bb      	strh	r3, [r7, #12]
 8002da4:	89bb      	ldrh	r3, [r7, #12]
 8002da6:	f083 0320 	eor.w	r3, r3, #32
 8002daa:	81bb      	strh	r3, [r7, #12]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	89bb      	ldrh	r3, [r7, #12]
 8002db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	8013      	strh	r3, [r2, #0]
 8002dcc:	e2d5      	b.n	800337a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de4:	81fb      	strh	r3, [r7, #14]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	89fb      	ldrh	r3, [r7, #14]
 8002df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8013      	strh	r3, [r2, #0]
 8002e06:	e2b8      	b.n	800337a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	4413      	add	r3, r2
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	011a      	lsls	r2, r3, #4
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	88db      	ldrh	r3, [r3, #6]
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	4413      	add	r3, r2
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	011a      	lsls	r2, r3, #4
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	4413      	add	r3, r2
 8002e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b3e      	cmp	r3, #62	; 0x3e
 8002e76:	d91d      	bls.n	8002eb4 <USB_ActivateEndpoint+0x2ac>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <USB_ActivateEndpoint+0x28a>
 8002e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	029b      	lsls	r3, r3, #10
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	e026      	b.n	8002f02 <USB_ActivateEndpoint+0x2fa>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <USB_ActivateEndpoint+0x2ca>
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	e017      	b.n	8002f02 <USB_ActivateEndpoint+0x2fa>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <USB_ActivateEndpoint+0x2e4>
 8002ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee8:	3301      	adds	r3, #1
 8002eea:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	029b      	lsls	r3, r3, #10
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01b      	beq.n	8002f52 <USB_ActivateEndpoint+0x34a>
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f30:	843b      	strh	r3, [r7, #32]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	441a      	add	r2, r3
 8002f3c:	8c3b      	ldrh	r3, [r7, #32]
 8002f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d124      	bne.n	8002fa4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f70:	83bb      	strh	r3, [r7, #28]
 8002f72:	8bbb      	ldrh	r3, [r7, #28]
 8002f74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f78:	83bb      	strh	r3, [r7, #28]
 8002f7a:	8bbb      	ldrh	r3, [r7, #28]
 8002f7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f80:	83bb      	strh	r3, [r7, #28]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	441a      	add	r2, r3
 8002f8c:	8bbb      	ldrh	r3, [r7, #28]
 8002f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	8013      	strh	r3, [r2, #0]
 8002fa2:	e1ea      	b.n	800337a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	83fb      	strh	r3, [r7, #30]
 8002fbc:	8bfb      	ldrh	r3, [r7, #30]
 8002fbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fc2:	83fb      	strh	r3, [r7, #30]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	8bfb      	ldrh	r3, [r7, #30]
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]
 8002fe4:	e1c9      	b.n	800337a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	78db      	ldrb	r3, [r3, #3]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d11e      	bne.n	800302c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003064:	b29b      	uxth	r3, r3
 8003066:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003078:	4413      	add	r3, r2
 800307a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	011a      	lsls	r2, r3, #4
 8003082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003084:	4413      	add	r3, r2
 8003086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800308a:	65bb      	str	r3, [r7, #88]	; 0x58
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	891b      	ldrh	r3, [r3, #8]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	4413      	add	r3, r2
 80030ae:	657b      	str	r3, [r7, #84]	; 0x54
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	011a      	lsls	r2, r3, #4
 80030b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030be:	653b      	str	r3, [r7, #80]	; 0x50
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	895b      	ldrh	r3, [r3, #10]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 8093 	bne.w	8003200 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01b      	beq.n	800312e <USB_ActivateEndpoint+0x526>
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800313c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <USB_ActivateEndpoint+0x576>
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800316a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	873b      	strh	r3, [r7, #56]	; 0x38
 8003196:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003198:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800319c:	873b      	strh	r3, [r7, #56]	; 0x38
 800319e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	441a      	add	r2, r3
 80031b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	8013      	strh	r3, [r2, #0]
 80031fe:	e0bc      	b.n	800337a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01d      	beq.n	8003258 <USB_ActivateEndpoint+0x650>
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003268:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01d      	beq.n	80032b0 <USB_ActivateEndpoint+0x6a8>
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800329c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	78db      	ldrb	r3, [r3, #3]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d024      	beq.n	8003302 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032d6:	f083 0320 	eor.w	r3, r3, #32
 80032da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
 8003300:	e01d      	b.n	800333e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	441a      	add	r2, r3
 8003326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800332a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333a:	b29b      	uxth	r3, r3
 800333c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800337a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800337e:	4618      	mov	r0, r3
 8003380:	3774      	adds	r7, #116	; 0x74
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003388:	b480      	push	{r7}
 800338a:	b08d      	sub	sp, #52	; 0x34
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7b1b      	ldrb	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 808e 	bne.w	80034b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d044      	beq.n	800342e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	81bb      	strh	r3, [r7, #12]
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <USB_DeactivateEndpoint+0x6c>
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	817b      	strh	r3, [r7, #10]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	897b      	ldrh	r3, [r7, #10]
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340a:	813b      	strh	r3, [r7, #8]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	893b      	ldrh	r3, [r7, #8]
 8003418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	b29b      	uxth	r3, r3
 800342a:	8013      	strh	r3, [r2, #0]
 800342c:	e192      	b.n	8003754 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	827b      	strh	r3, [r7, #18]
 800343c:	8a7b      	ldrh	r3, [r7, #18]
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01b      	beq.n	800347e <USB_DeactivateEndpoint+0xf6>
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	823b      	strh	r3, [r7, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	8a3b      	ldrh	r3, [r7, #16]
 800346a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	81fb      	strh	r3, [r7, #14]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	441a      	add	r2, r3
 80034a0:	89fb      	ldrh	r3, [r7, #14]
 80034a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]
 80034b6:	e14d      	b.n	8003754 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 80a5 	bne.w	800360c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	843b      	strh	r3, [r7, #32]
 80034d0:	8c3b      	ldrh	r3, [r7, #32]
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01b      	beq.n	8003512 <USB_DeactivateEndpoint+0x18a>
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f0:	83fb      	strh	r3, [r7, #30]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	8bfb      	ldrh	r3, [r7, #30]
 80034fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800350a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350e:	b29b      	uxth	r3, r3
 8003510:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	83bb      	strh	r3, [r7, #28]
 8003520:	8bbb      	ldrh	r3, [r7, #28]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01b      	beq.n	8003562 <USB_DeactivateEndpoint+0x1da>
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	837b      	strh	r3, [r7, #26]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	8b7b      	ldrh	r3, [r7, #26]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003578:	833b      	strh	r3, [r7, #24]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	441a      	add	r2, r3
 8003584:	8b3b      	ldrh	r3, [r7, #24]
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b0:	82fb      	strh	r3, [r7, #22]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e8:	82bb      	strh	r3, [r7, #20]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	8abb      	ldrh	r3, [r7, #20]
 80035f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003606:	b29b      	uxth	r3, r3
 8003608:	8013      	strh	r3, [r2, #0]
 800360a:	e0a3      	b.n	8003754 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800361a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <USB_DeactivateEndpoint+0x2d4>
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	857b      	strh	r3, [r7, #42]	; 0x2a
 800366a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <USB_DeactivateEndpoint+0x324>
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	853b      	strh	r3, [r7, #40]	; 0x28
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	b29b      	uxth	r3, r3
 800371a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	847b      	strh	r3, [r7, #34]	; 0x22
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003750:	b29b      	uxth	r3, r3
 8003752:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3734      	adds	r7, #52	; 0x34
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0c2      	sub	sp, #264	; 0x108
 8003764:	af00      	add	r7, sp, #0
 8003766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800376a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800376e:	6018      	str	r0, [r3, #0]
 8003770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003778:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800377a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800377e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	2b01      	cmp	r3, #1
 8003788:	f040 86b7 	bne.w	80044fa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800378c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800379c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80037a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037b8:	e007      	b.n	80037ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80037ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80037ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	7b1b      	ldrb	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d13a      	bne.n	8003850 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6959      	ldr	r1, [r3, #20]
 80037e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	88da      	ldrh	r2, [r3, #6]
 80037f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80037fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	f001 fc9c 	bl	800513e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800380a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800382e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	011a      	lsls	r2, r3, #4
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	f000 be1f 	b.w	800448e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b02      	cmp	r3, #2
 800385e:	f040 8462 	bne.w	8004126 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	f240 83df 	bls.w	800403e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800388e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80038aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	b29b      	uxth	r3, r3
 80038da:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ec:	1ad2      	subs	r2, r2, r3
 80038ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 81c7 	beq.w	8003cb0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d177      	bne.n	8003a2e <USB_EPStartXfer+0x2ce>
 800393e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
 800394a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800394e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	4413      	add	r3, r2
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
 8003962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011a      	lsls	r2, r3, #4
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	4413      	add	r3, r2
 8003974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003984:	b29a      	uxth	r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398e:	2b3e      	cmp	r3, #62	; 0x3e
 8003990:	d921      	bls.n	80039d6 <USB_EPStartXfer+0x276>
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <USB_EPStartXfer+0x252>
 80039a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80039ac:	3b01      	subs	r3, #1
 80039ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80039bc:	b29b      	uxth	r3, r3
 80039be:	029b      	lsls	r3, r3, #10
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	e050      	b.n	8003a78 <USB_EPStartXfer+0x318>
 80039d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <USB_EPStartXfer+0x294>
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	e041      	b.n	8003a78 <USB_EPStartXfer+0x318>
 80039f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <USB_EPStartXfer+0x2b4>
 8003a0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	029b      	lsls	r3, r3, #10
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	e024      	b.n	8003a78 <USB_EPStartXfer+0x318>
 8003a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d11c      	bne.n	8003a78 <USB_EPStartXfer+0x318>
 8003a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	4413      	add	r3, r2
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
 8003a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	011a      	lsls	r2, r3, #4
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	4413      	add	r3, r2
 8003a68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	895b      	ldrh	r3, [r3, #10]
 8003a84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6959      	ldr	r1, [r3, #20]
 8003a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003a9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003aa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003aa6:	6800      	ldr	r0, [r0, #0]
 8003aa8:	f001 fb49 	bl	800513e <USB_WritePMA>
            ep->xfer_buff += len;
 8003aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003abc:	441a      	add	r2, r3
 8003abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d90f      	bls.n	8003b06 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	621a      	str	r2, [r3, #32]
 8003b04:	e00e      	b.n	8003b24 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d177      	bne.n	8003c24 <USB_EPStartXfer+0x4c4>
 8003b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4413      	add	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	011a      	lsls	r2, r3, #4
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b84:	2b3e      	cmp	r3, #62	; 0x3e
 8003b86:	d921      	bls.n	8003bcc <USB_EPStartXfer+0x46c>
 8003b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <USB_EPStartXfer+0x448>
 8003b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e056      	b.n	8003c7a <USB_EPStartXfer+0x51a>
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <USB_EPStartXfer+0x48a>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	801a      	strh	r2, [r3, #0]
 8003be8:	e047      	b.n	8003c7a <USB_EPStartXfer+0x51a>
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <USB_EPStartXfer+0x4aa>
 8003c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c04:	3301      	adds	r3, #1
 8003c06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e02a      	b.n	8003c7a <USB_EPStartXfer+0x51a>
 8003c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d122      	bne.n	8003c7a <USB_EPStartXfer+0x51a>
 8003c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	4413      	add	r3, r2
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	011a      	lsls	r2, r3, #4
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	891b      	ldrh	r3, [r3, #8]
 8003c86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6959      	ldr	r1, [r3, #20]
 8003c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ca0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003ca4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003ca8:	6800      	ldr	r0, [r0, #0]
 8003caa:	f001 fa48 	bl	800513e <USB_WritePMA>
 8003cae:	e3ee      	b.n	800448e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d177      	bne.n	8003db0 <USB_EPStartXfer+0x650>
 8003cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce0:	4413      	add	r3, r2
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	011a      	lsls	r2, r3, #4
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d10:	2b3e      	cmp	r3, #62	; 0x3e
 8003d12:	d921      	bls.n	8003d58 <USB_EPStartXfer+0x5f8>
 8003d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <USB_EPStartXfer+0x5d4>
 8003d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	801a      	strh	r2, [r3, #0]
 8003d56:	e056      	b.n	8003e06 <USB_EPStartXfer+0x6a6>
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <USB_EPStartXfer+0x616>
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	e047      	b.n	8003e06 <USB_EPStartXfer+0x6a6>
 8003d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <USB_EPStartXfer+0x636>
 8003d8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d90:	3301      	adds	r3, #1
 8003d92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	029b      	lsls	r3, r3, #10
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	e02a      	b.n	8003e06 <USB_EPStartXfer+0x6a6>
 8003db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d122      	bne.n	8003e06 <USB_EPStartXfer+0x6a6>
 8003dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
 8003dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de0:	4413      	add	r3, r2
 8003de2:	653b      	str	r3, [r7, #80]	; 0x50
 8003de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	891b      	ldrh	r3, [r3, #8]
 8003e12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6959      	ldr	r1, [r3, #20]
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003e2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003e30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003e34:	6800      	ldr	r0, [r0, #0]
 8003e36:	f001 f982 	bl	800513e <USB_WritePMA>
            ep->xfer_buff += len;
 8003e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4a:	441a      	add	r2, r3
 8003e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d90f      	bls.n	8003e94 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e84:	1ad2      	subs	r2, r2, r3
 8003e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	621a      	str	r2, [r3, #32]
 8003e92:	e00e      	b.n	8003eb2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d177      	bne.n	8003fbe <USB_EPStartXfer+0x85e>
 8003ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	4413      	add	r3, r2
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	011a      	lsls	r2, r3, #4
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	4413      	add	r3, r2
 8003f04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f20:	d921      	bls.n	8003f66 <USB_EPStartXfer+0x806>
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <USB_EPStartXfer+0x7e2>
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	029b      	lsls	r3, r3, #10
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	e050      	b.n	8004008 <USB_EPStartXfer+0x8a8>
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <USB_EPStartXfer+0x824>
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e041      	b.n	8004008 <USB_EPStartXfer+0x8a8>
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <USB_EPStartXfer+0x844>
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	029b      	lsls	r3, r3, #10
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	e024      	b.n	8004008 <USB_EPStartXfer+0x8a8>
 8003fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d11c      	bne.n	8004008 <USB_EPStartXfer+0x8a8>
 8003fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe2:	4413      	add	r3, r2
 8003fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	011a      	lsls	r2, r3, #4
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004002:	b29a      	uxth	r2, r3
 8004004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	895b      	ldrh	r3, [r3, #10]
 8004014:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800401c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6959      	ldr	r1, [r3, #20]
 8004024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004028:	b29b      	uxth	r3, r3
 800402a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800402e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004032:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004036:	6800      	ldr	r0, [r0, #0]
 8004038:	f001 f881 	bl	800513e <USB_WritePMA>
 800403c:	e227      	b.n	800448e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800403e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800404e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800405c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004074:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800407c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80040aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ca:	4413      	add	r3, r2
 80040cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	011a      	lsls	r2, r3, #4
 80040dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040de:	4413      	add	r3, r2
 80040e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80040e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	891b      	ldrh	r3, [r3, #8]
 80040fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6959      	ldr	r1, [r3, #20]
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004110:	b29b      	uxth	r3, r3
 8004112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004116:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800411a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	f001 f80d 	bl	800513e <USB_WritePMA>
 8004124:	e1b3      	b.n	800448e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800412a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800413c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80c6 	beq.w	80042f8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800416c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	673b      	str	r3, [r7, #112]	; 0x70
 8004178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800417c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d177      	bne.n	8004278 <USB_EPStartXfer+0xb18>
 8004188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	66bb      	str	r3, [r7, #104]	; 0x68
 8004194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a8:	4413      	add	r3, r2
 80041aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041bc:	4413      	add	r3, r2
 80041be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041c2:	667b      	str	r3, [r7, #100]	; 0x64
 80041c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d8:	2b3e      	cmp	r3, #62	; 0x3e
 80041da:	d921      	bls.n	8004220 <USB_EPStartXfer+0xac0>
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <USB_EPStartXfer+0xa9c>
 80041f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29a      	uxth	r2, r3
 8004202:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004206:	b29b      	uxth	r3, r3
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	b29b      	uxth	r3, r3
 800420c:	4313      	orrs	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29a      	uxth	r2, r3
 800421a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	e050      	b.n	80042c2 <USB_EPStartXfer+0xb62>
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <USB_EPStartXfer+0xade>
 8004228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004236:	b29a      	uxth	r2, r3
 8004238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	e041      	b.n	80042c2 <USB_EPStartXfer+0xb62>
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <USB_EPStartXfer+0xafe>
 8004254:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004258:	3301      	adds	r3, #1
 800425a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800425e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29a      	uxth	r2, r3
 8004264:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004268:	b29b      	uxth	r3, r3
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	b29b      	uxth	r3, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	b29a      	uxth	r2, r3
 8004272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	e024      	b.n	80042c2 <USB_EPStartXfer+0xb62>
 8004278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800427c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11c      	bne.n	80042c2 <USB_EPStartXfer+0xb62>
 8004288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800428c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429c:	4413      	add	r3, r2
 800429e:	673b      	str	r3, [r7, #112]	; 0x70
 80042a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b0:	4413      	add	r3, r2
 80042b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80042c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	895b      	ldrh	r3, [r3, #10]
 80042ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6959      	ldr	r1, [r3, #20]
 80042de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80042e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80042ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80042f0:	6800      	ldr	r0, [r0, #0]
 80042f2:	f000 ff24 	bl	800513e <USB_WritePMA>
 80042f6:	e0ca      	b.n	800448e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d177      	bne.n	80043f8 <USB_EPStartXfer+0xc98>
 8004308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800430c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004328:	4413      	add	r3, r2
 800432a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800432c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800433c:	4413      	add	r3, r2
 800433e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004342:	67bb      	str	r3, [r7, #120]	; 0x78
 8004344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434e:	b29a      	uxth	r2, r3
 8004350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004358:	2b3e      	cmp	r3, #62	; 0x3e
 800435a:	d921      	bls.n	80043a0 <USB_EPStartXfer+0xc40>
 800435c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2b00      	cmp	r3, #0
 8004370:	d104      	bne.n	800437c <USB_EPStartXfer+0xc1c>
 8004372:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004376:	3b01      	subs	r3, #1
 8004378:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800437c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29a      	uxth	r2, r3
 8004382:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004386:	b29b      	uxth	r3, r3
 8004388:	029b      	lsls	r3, r3, #10
 800438a:	b29b      	uxth	r3, r3
 800438c:	4313      	orrs	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004398:	b29a      	uxth	r2, r3
 800439a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e05c      	b.n	800445a <USB_EPStartXfer+0xcfa>
 80043a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <USB_EPStartXfer+0xc5e>
 80043a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	e04d      	b.n	800445a <USB_EPStartXfer+0xcfa>
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <USB_EPStartXfer+0xc7e>
 80043d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043d8:	3301      	adds	r3, #1
 80043da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e030      	b.n	800445a <USB_EPStartXfer+0xcfa>
 80043f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d128      	bne.n	800445a <USB_EPStartXfer+0xcfa>
 8004408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800440c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800442c:	4413      	add	r3, r2
 800442e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	011a      	lsls	r2, r3, #4
 8004440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004444:	4413      	add	r3, r2
 8004446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800444a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800444e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004452:	b29a      	uxth	r2, r3
 8004454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004458:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800445a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	891b      	ldrh	r3, [r3, #8]
 8004466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800446a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800446e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6959      	ldr	r1, [r3, #20]
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800447a:	b29b      	uxth	r3, r3
 800447c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004480:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004484:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004488:	6800      	ldr	r0, [r0, #0]
 800448a:	f000 fe58 	bl	800513e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800448e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800449c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f083 0310 	eor.w	r3, r3, #16
 80044bc:	817b      	strh	r3, [r7, #10]
 80044be:	897b      	ldrh	r3, [r7, #10]
 80044c0:	f083 0320 	eor.w	r3, r3, #32
 80044c4:	817b      	strh	r3, [r7, #10]
 80044c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	897b      	ldrh	r3, [r7, #10]
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]
 80044f6:	f000 bcde 	b.w	8004eb6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80044fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	7b1b      	ldrb	r3, [r3, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 80bb 	bne.w	8004682 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800450c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800451c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	429a      	cmp	r2, r3
 8004526:	d917      	bls.n	8004558 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800452c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800453c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004548:	1ad2      	subs	r2, r2, r3
 800454a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800454e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	619a      	str	r2, [r3, #24]
 8004556:	e00e      	b.n	8004576 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800455c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800456c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800459a:	4413      	add	r3, r2
 800459c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	011a      	lsls	r2, r3, #4
 80045ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045b2:	4413      	add	r3, r2
 80045b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d4:	2b3e      	cmp	r3, #62	; 0x3e
 80045d6:	d924      	bls.n	8004622 <USB_EPStartXfer+0xec2>
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <USB_EPStartXfer+0xe98>
 80045ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29a      	uxth	r2, r3
 8004600:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004604:	b29b      	uxth	r3, r3
 8004606:	029b      	lsls	r3, r3, #10
 8004608:	b29b      	uxth	r3, r3
 800460a:	4313      	orrs	r3, r2
 800460c:	b29b      	uxth	r3, r3
 800460e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004616:	b29a      	uxth	r2, r3
 8004618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	f000 bc10 	b.w	8004e42 <USB_EPStartXfer+0x16e2>
 8004622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <USB_EPStartXfer+0xee4>
 800462a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463a:	b29a      	uxth	r2, r3
 800463c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004640:	801a      	strh	r2, [r3, #0]
 8004642:	e3fe      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <USB_EPStartXfer+0xf04>
 800465a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800465e:	3301      	adds	r3, #1
 8004660:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29a      	uxth	r2, r3
 800466c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004670:	b29b      	uxth	r3, r3
 8004672:	029b      	lsls	r3, r3, #10
 8004674:	b29b      	uxth	r3, r3
 8004676:	4313      	orrs	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800467e:	801a      	strh	r2, [r3, #0]
 8004680:	e3df      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	78db      	ldrb	r3, [r3, #3]
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 8218 	bne.w	8004ac4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	785b      	ldrb	r3, [r3, #1]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 809d 	bne.w	80047e0 <USB_EPStartXfer+0x1080>
 80046a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ca:	4413      	add	r3, r2
 80046cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	011a      	lsls	r2, r3, #4
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e2:	4413      	add	r3, r2
 80046e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046fe:	801a      	strh	r2, [r3, #0]
 8004700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b3e      	cmp	r3, #62	; 0x3e
 800470e:	d92b      	bls.n	8004768 <USB_EPStartXfer+0x1008>
 8004710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <USB_EPStartXfer+0xfe0>
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	3b01      	subs	r3, #1
 800473c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004740:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29a      	uxth	r2, r3
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474c:	b29b      	uxth	r3, r3
 800474e:	029b      	lsls	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	4313      	orrs	r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800475a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475e:	b29a      	uxth	r2, r3
 8004760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	e070      	b.n	800484a <USB_EPStartXfer+0x10ea>
 8004768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10c      	bne.n	8004792 <USB_EPStartXfer+0x1032>
 8004778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	e05b      	b.n	800484a <USB_EPStartXfer+0x10ea>
 8004792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <USB_EPStartXfer+0x1062>
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047bc:	3301      	adds	r3, #1
 80047be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	e034      	b.n	800484a <USB_EPStartXfer+0x10ea>
 80047e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d12c      	bne.n	800484a <USB_EPStartXfer+0x10ea>
 80047f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004814:	4413      	add	r3, r2
 8004816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800481a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800481e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	011a      	lsls	r2, r3, #4
 8004828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800482c:	4413      	add	r3, r2
 800482e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800483a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	b29a      	uxth	r2, r3
 8004844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800484e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800485c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 809d 	bne.w	80049a4 <USB_EPStartXfer+0x1244>
 800486a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800486e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800487c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800488e:	4413      	add	r3, r2
 8004890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	011a      	lsls	r2, r3, #4
 80048a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b3e      	cmp	r3, #62	; 0x3e
 80048d2:	d92b      	bls.n	800492c <USB_EPStartXfer+0x11cc>
 80048d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <USB_EPStartXfer+0x11a4>
 80048fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fe:	3b01      	subs	r3, #1
 8004900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29a      	uxth	r2, r3
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	b29b      	uxth	r3, r3
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	b29b      	uxth	r3, r3
 8004916:	4313      	orrs	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004922:	b29a      	uxth	r2, r3
 8004924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	e069      	b.n	8004a00 <USB_EPStartXfer+0x12a0>
 800492c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10c      	bne.n	8004956 <USB_EPStartXfer+0x11f6>
 800493c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	e054      	b.n	8004a00 <USB_EPStartXfer+0x12a0>
 8004956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <USB_EPStartXfer+0x1226>
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	3301      	adds	r3, #1
 8004982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004986:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29a      	uxth	r2, r3
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	b29b      	uxth	r3, r3
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	b29b      	uxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	b29a      	uxth	r2, r3
 800499c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	e02d      	b.n	8004a00 <USB_EPStartXfer+0x12a0>
 80049a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d125      	bne.n	8004a00 <USB_EPStartXfer+0x12a0>
 80049b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049ca:	4413      	add	r3, r2
 80049cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e2:	4413      	add	r3, r2
 80049e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049fe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8218 	beq.w	8004e42 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004a32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <USB_EPStartXfer+0x12ea>
 8004a3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004a4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 81f5 	bne.w	8004e42 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004a58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 81ee 	bne.w	8004e42 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
 8004ac2:	e1be      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	78db      	ldrb	r3, [r3, #3]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	f040 81b4 	bne.w	8004e3e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d917      	bls.n	8004b22 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	619a      	str	r2, [r3, #24]
 8004b20:	e00e      	b.n	8004b40 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f040 8085 	bne.w	8004c5c <USB_EPStartXfer+0x14fc>
 8004b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b76:	4413      	add	r3, r2
 8004b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	011a      	lsls	r2, r3, #4
 8004b8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b8e:	4413      	add	r3, r2
 8004b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb2:	d923      	bls.n	8004bfc <USB_EPStartXfer+0x149c>
 8004bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <USB_EPStartXfer+0x1474>
 8004bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4313      	orrs	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bf8:	801a      	strh	r2, [r3, #0]
 8004bfa:	e060      	b.n	8004cbe <USB_EPStartXfer+0x155e>
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10c      	bne.n	8004c1e <USB_EPStartXfer+0x14be>
 8004c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	e04f      	b.n	8004cbe <USB_EPStartXfer+0x155e>
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <USB_EPStartXfer+0x14de>
 8004c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	029b      	lsls	r3, r3, #10
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4313      	orrs	r3, r2
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	e030      	b.n	8004cbe <USB_EPStartXfer+0x155e>
 8004c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d128      	bne.n	8004cbe <USB_EPStartXfer+0x155e>
 8004c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c90:	4413      	add	r3, r2
 8004c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	011a      	lsls	r2, r3, #4
 8004ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ca8:	4413      	add	r3, r2
 8004caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 8085 	bne.w	8004de8 <USB_EPStartXfer+0x1688>
 8004cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d02:	4413      	add	r3, r2
 8004d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	011a      	lsls	r2, r3, #4
 8004d16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3e:	d923      	bls.n	8004d88 <USB_EPStartXfer+0x1628>
 8004d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <USB_EPStartXfer+0x1600>
 8004d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	4313      	orrs	r3, r2
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	e05c      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10c      	bne.n	8004daa <USB_EPStartXfer+0x164a>
 8004d90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e04b      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <USB_EPStartXfer+0x166a>
 8004dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e02c      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
 8004de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d124      	bne.n	8004e42 <USB_EPStartXfer+0x16e2>
 8004df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e0e:	4413      	add	r3, r2
 8004e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	011a      	lsls	r2, r3, #4
 8004e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e26:	4413      	add	r3, r2
 8004e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e001      	b.n	8004e42 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e03a      	b.n	8004eb8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004e6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004e78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d020      	beq.n	8004f16 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eea:	81bb      	strh	r3, [r7, #12]
 8004eec:	89bb      	ldrh	r3, [r7, #12]
 8004eee:	f083 0310 	eor.w	r3, r3, #16
 8004ef2:	81bb      	strh	r3, [r7, #12]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	89bb      	ldrh	r3, [r7, #12]
 8004f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	8013      	strh	r3, [r2, #0]
 8004f14:	e01f      	b.n	8004f56 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	81fb      	strh	r3, [r7, #14]
 8004f2e:	89fb      	ldrh	r3, [r7, #14]
 8004f30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f34:	81fb      	strh	r3, [r7, #14]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	441a      	add	r2, r3
 8004f40:	89fb      	ldrh	r3, [r7, #14]
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b087      	sub	sp, #28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	7b1b      	ldrb	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 809d 	bne.w	80050b0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04c      	beq.n	8005018 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	823b      	strh	r3, [r7, #16]
 8004f8c:	8a3b      	ldrh	r3, [r7, #16]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01b      	beq.n	8004fce <USB_EPClearStall+0x6c>
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	81fb      	strh	r3, [r7, #14]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	78db      	ldrb	r3, [r3, #3]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d06c      	beq.n	80050b0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fec:	81bb      	strh	r3, [r7, #12]
 8004fee:	89bb      	ldrh	r3, [r7, #12]
 8004ff0:	f083 0320 	eor.w	r3, r3, #32
 8004ff4:	81bb      	strh	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	89bb      	ldrh	r3, [r7, #12]
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]
 8005016:	e04b      	b.n	80050b0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	82fb      	strh	r3, [r7, #22]
 8005026:	8afb      	ldrh	r3, [r7, #22]
 8005028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01b      	beq.n	8005068 <USB_EPClearStall+0x106>
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	82bb      	strh	r3, [r7, #20]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	8abb      	ldrh	r3, [r7, #20]
 8005054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	b29b      	uxth	r3, r3
 8005066:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	827b      	strh	r3, [r7, #18]
 8005080:	8a7b      	ldrh	r3, [r7, #18]
 8005082:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005086:	827b      	strh	r3, [r7, #18]
 8005088:	8a7b      	ldrh	r3, [r7, #18]
 800508a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800508e:	827b      	strh	r3, [r7, #18]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	8a7b      	ldrh	r3, [r7, #18]
 800509c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d103      	bne.n	80050d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2280      	movs	r2, #128	; 0x80
 80050d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr

080050f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005118:	b29b      	uxth	r3, r3
 800511a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800511c:	68fb      	ldr	r3, [r7, #12]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800513e:	b480      	push	{r7}
 8005140:	b08b      	sub	sp, #44	; 0x2c
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	4611      	mov	r1, r2
 800514a:	461a      	mov	r2, r3
 800514c:	460b      	mov	r3, r1
 800514e:	80fb      	strh	r3, [r7, #6]
 8005150:	4613      	mov	r3, r2
 8005152:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005154:	88bb      	ldrh	r3, [r7, #4]
 8005156:	3301      	adds	r3, #1
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	005a      	lsls	r2, r3, #1
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005170:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	e01e      	b.n	80051b6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3301      	adds	r3, #1
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	b21a      	sxth	r2, r3
 8005188:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800518c:	4313      	orrs	r3, r2
 800518e:	b21b      	sxth	r3, r3
 8005190:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	8a7a      	ldrh	r2, [r7, #18]
 8005196:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	3302      	adds	r3, #2
 800519c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	3302      	adds	r3, #2
 80051a2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	3b01      	subs	r3, #1
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1dd      	bne.n	8005178 <USB_WritePMA+0x3a>
  }
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	372c      	adds	r7, #44	; 0x2c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr

080051c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b08b      	sub	sp, #44	; 0x2c
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	460b      	mov	r3, r1
 80051d8:	80fb      	strh	r3, [r7, #6]
 80051da:	4613      	mov	r3, r2
 80051dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80051de:	88bb      	ldrh	r3, [r7, #4]
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	005a      	lsls	r2, r3, #1
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005200:	e01b      	b.n	800523a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	3302      	adds	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	b2da      	uxtb	r2, r3
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	3302      	adds	r3, #2
 8005232:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	3b01      	subs	r3, #1
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e0      	bne.n	8005202 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005240:	88bb      	ldrh	r3, [r7, #4]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	701a      	strb	r2, [r3, #0]
  }
}
 800525c:	bf00      	nop
 800525e:	372c      	adds	r7, #44	; 0x2c
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7c1b      	ldrb	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d115      	bne.n	80052aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800527e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005282:	2202      	movs	r2, #2
 8005284:	2181      	movs	r1, #129	; 0x81
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f001 fe91 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005296:	2202      	movs	r2, #2
 8005298:	2101      	movs	r1, #1
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 fe87 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80052a8:	e012      	b.n	80052d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	2202      	movs	r2, #2
 80052ae:	2181      	movs	r1, #129	; 0x81
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fe7c 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	2202      	movs	r2, #2
 80052c0:	2101      	movs	r1, #1
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f001 fe73 	bl	8006fae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052d0:	2308      	movs	r3, #8
 80052d2:	2203      	movs	r2, #3
 80052d4:	2182      	movs	r1, #130	; 0x82
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 fe69 	bl	8006fae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052e2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052e6:	f001 ff89 	bl	80071fc <USBD_static_malloc>
 80052ea:	4602      	mov	r2, r0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d102      	bne.n	8005302 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e026      	b.n	8005350 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005308:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7c1b      	ldrb	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d109      	bne.n	8005340 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005336:	2101      	movs	r1, #1
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 ff28 	bl	800718e <USBD_LL_PrepareReceive>
 800533e:	e007      	b.n	8005350 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	2101      	movs	r1, #1
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 ff1f 	bl	800718e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	460b      	mov	r3, r1
 8005364:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800536a:	2181      	movs	r1, #129	; 0x81
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fe44 	bl	8006ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005378:	2101      	movs	r1, #1
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fe3d 	bl	8006ffa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005388:	2182      	movs	r1, #130	; 0x82
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fe35 	bl	8006ffa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00e      	beq.n	80053be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 ff2f 	bl	8007214 <USBD_static_free>
    pdev->pClassData = NULL;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d039      	beq.n	8005466 <USBD_CDC_Setup+0x9e>
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d17f      	bne.n	80054f6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d029      	beq.n	8005452 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b25b      	sxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	da11      	bge.n	800542c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005414:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	88d2      	ldrh	r2, [r2, #6]
 800541a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800541c:	6939      	ldr	r1, [r7, #16]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	88db      	ldrh	r3, [r3, #6]
 8005422:	461a      	mov	r2, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 fa0a 	bl	800683e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800542a:	e06b      	b.n	8005504 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	785a      	ldrb	r2, [r3, #1]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	88db      	ldrh	r3, [r3, #6]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005442:	6939      	ldr	r1, [r7, #16]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	88db      	ldrh	r3, [r3, #6]
 8005448:	461a      	mov	r2, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fa25 	bl	800689a <USBD_CtlPrepareRx>
      break;
 8005450:	e058      	b.n	8005504 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	7850      	ldrb	r0, [r2, #1]
 800545e:	2200      	movs	r2, #0
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	4798      	blx	r3
      break;
 8005464:	e04e      	b.n	8005504 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b0b      	cmp	r3, #11
 800546c:	d02e      	beq.n	80054cc <USBD_CDC_Setup+0x104>
 800546e:	2b0b      	cmp	r3, #11
 8005470:	dc38      	bgt.n	80054e4 <USBD_CDC_Setup+0x11c>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <USBD_CDC_Setup+0xb4>
 8005476:	2b0a      	cmp	r3, #10
 8005478:	d014      	beq.n	80054a4 <USBD_CDC_Setup+0xdc>
 800547a:	e033      	b.n	80054e4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005482:	2b03      	cmp	r3, #3
 8005484:	d107      	bne.n	8005496 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	2202      	movs	r2, #2
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 f9d5 	bl	800683e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005494:	e02e      	b.n	80054f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 f966 	bl	800676a <USBD_CtlError>
            ret = USBD_FAIL;
 800549e:	2302      	movs	r3, #2
 80054a0:	75fb      	strb	r3, [r7, #23]
          break;
 80054a2:	e027      	b.n	80054f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d107      	bne.n	80054be <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80054ae:	f107 030f 	add.w	r3, r7, #15
 80054b2:	2201      	movs	r2, #1
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 f9c1 	bl	800683e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054bc:	e01a      	b.n	80054f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 f952 	bl	800676a <USBD_CtlError>
            ret = USBD_FAIL;
 80054c6:	2302      	movs	r3, #2
 80054c8:	75fb      	strb	r3, [r7, #23]
          break;
 80054ca:	e013      	b.n	80054f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d00d      	beq.n	80054f2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 f946 	bl	800676a <USBD_CtlError>
            ret = USBD_FAIL;
 80054de:	2302      	movs	r3, #2
 80054e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054e2:	e006      	b.n	80054f2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 f93f 	bl	800676a <USBD_CtlError>
          ret = USBD_FAIL;
 80054ec:	2302      	movs	r3, #2
 80054ee:	75fb      	strb	r3, [r7, #23]
          break;
 80054f0:	e000      	b.n	80054f4 <USBD_CDC_Setup+0x12c>
          break;
 80054f2:	bf00      	nop
      }
      break;
 80054f4:	e006      	b.n	8005504 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 f936 	bl	800676a <USBD_CtlError>
      ret = USBD_FAIL;
 80054fe:	2302      	movs	r3, #2
 8005500:	75fb      	strb	r3, [r7, #23]
      break;
 8005502:	bf00      	nop
  }

  return ret;
 8005504:	7dfb      	ldrb	r3, [r7, #23]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005520:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005528:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03a      	beq.n	80055aa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	331c      	adds	r3, #28
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d029      	beq.n	800559e <USBD_CDC_DataIn+0x90>
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	331c      	adds	r3, #28
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	78f9      	ldrb	r1, [r7, #3]
 800555e:	68b8      	ldr	r0, [r7, #8]
 8005560:	460b      	mov	r3, r1
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4403      	add	r3, r0
 800556a:	3320      	adds	r3, #32
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005572:	fb01 f303 	mul.w	r3, r1, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d110      	bne.n	800559e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	331c      	adds	r3, #28
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005590:	78f9      	ldrb	r1, [r7, #3]
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 fdd6 	bl	8007148 <USBD_LL_Transmit>
 800559c:	e003      	b.n	80055a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 fe01 	bl	80071d4 <USBD_LL_GetRxDataSize>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00d      	beq.n	8005600 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055f8:	4611      	mov	r1, r2
 80055fa:	4798      	blx	r3

    return USBD_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e000      	b.n	8005602 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005600:	2302      	movs	r3, #2
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <USBD_CDC_EP0_RxReady+0x46>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800562a:	2bff      	cmp	r3, #255	; 0xff
 800562c:	d010      	beq.n	8005650 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800563c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005644:	b292      	uxth	r2, r2
 8005646:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2243      	movs	r2, #67	; 0x43
 8005668:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800566a:	4b03      	ldr	r3, [pc, #12]	; (8005678 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000094 	.word	0x20000094

0800567c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2243      	movs	r2, #67	; 0x43
 8005688:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800568a:	4b03      	ldr	r3, [pc, #12]	; (8005698 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000050 	.word	0x20000050

0800569c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2243      	movs	r2, #67	; 0x43
 80056a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80056aa:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	200000d8 	.word	0x200000d8

080056bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	220a      	movs	r2, #10
 80056c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80056ca:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bc80      	pop	{r7}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	2000000c 	.word	0x2000000c

080056dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80056e6:	2302      	movs	r3, #2
 80056e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01c      	beq.n	80057b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005780:	2b00      	cmp	r3, #0
 8005782:	d115      	bne.n	80057b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2181      	movs	r1, #129	; 0x81
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 fcce 	bl	8007148 <USBD_LL_Transmit>

      return USBD_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e002      	b.n	80057b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d017      	beq.n	8005808 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7c1b      	ldrb	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ea:	2101      	movs	r1, #1
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fcce 	bl	800718e <USBD_LL_PrepareReceive>
 80057f2:	e007      	b.n	8005804 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057fa:	2340      	movs	r3, #64	; 0x40
 80057fc:	2101      	movs	r1, #1
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fcc5 	bl	800718e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e000      	b.n	800580a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005808:	2302      	movs	r3, #2
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005826:	2302      	movs	r3, #2
 8005828:	e01a      	b.n	8005860 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	79fa      	ldrb	r2, [r7, #7]
 8005856:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f001 fb33 	bl	8006ec4 <USBD_LL_Init>

  return USBD_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d006      	beq.n	800588a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	73fb      	strb	r3, [r7, #15]
 8005888:	e001      	b.n	800588e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800588a:	2302      	movs	r3, #2
 800588c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fb68 	bl	8006f78 <USBD_LL_Start>

  return USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058d2:	2302      	movs	r3, #2
 80058d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00c      	beq.n	80058fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	4611      	mov	r1, r2
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	4798      	blx	r3
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	4611      	mov	r1, r2
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	4798      	blx	r3

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fed8 	bl	80066f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800595e:	f003 031f 	and.w	r3, r3, #31
 8005962:	2b02      	cmp	r3, #2
 8005964:	d016      	beq.n	8005994 <USBD_LL_SetupStage+0x6a>
 8005966:	2b02      	cmp	r3, #2
 8005968:	d81c      	bhi.n	80059a4 <USBD_LL_SetupStage+0x7a>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <USBD_LL_SetupStage+0x4a>
 800596e:	2b01      	cmp	r3, #1
 8005970:	d008      	beq.n	8005984 <USBD_LL_SetupStage+0x5a>
 8005972:	e017      	b.n	80059a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f9cb 	bl	8005d18 <USBD_StdDevReq>
      break;
 8005982:	e01a      	b.n	80059ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa2d 	bl	8005dec <USBD_StdItfReq>
      break;
 8005992:	e012      	b.n	80059ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fa6d 	bl	8005e7c <USBD_StdEPReq>
      break;
 80059a2:	e00a      	b.n	80059ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fb40 	bl	8007038 <USBD_LL_StallEP>
      break;
 80059b8:	bf00      	nop
  }

  return USBD_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	460b      	mov	r3, r1
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059d2:	7afb      	ldrb	r3, [r7, #11]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d14b      	bne.n	8005a70 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d134      	bne.n	8005a54 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d919      	bls.n	8005a2a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d203      	bcs.n	8005a18 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	e002      	b.n	8005a1e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 ff57 	bl	80068d6 <USBD_CtlContinueRx>
 8005a28:	e038      	b.n	8005a9c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d105      	bne.n	8005a4c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 ff54 	bl	80068fa <USBD_CtlSendStatus>
 8005a52:	e023      	b.n	8005a9c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d11e      	bne.n	8005a9c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005a66:	2100      	movs	r1, #0
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f001 fae5 	bl	8007038 <USBD_LL_StallEP>
 8005a6e:	e015      	b.n	8005a9c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00d      	beq.n	8005a98 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d108      	bne.n	8005a98 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	7afa      	ldrb	r2, [r7, #11]
 8005a90:	4611      	mov	r1, r2
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	4798      	blx	r3
 8005a96:	e001      	b.n	8005a9c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e000      	b.n	8005a9e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d17f      	bne.n	8005bba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3314      	adds	r3, #20
 8005abe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d15c      	bne.n	8005b84 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d915      	bls.n	8005b02 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fec1 	bl	8006876 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005af4:	2300      	movs	r3, #0
 8005af6:	2200      	movs	r2, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f001 fb47 	bl	800718e <USBD_LL_PrepareReceive>
 8005b00:	e04e      	b.n	8005ba0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	6912      	ldr	r2, [r2, #16]
 8005b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b0e:	fb01 f202 	mul.w	r2, r1, r2
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d11c      	bne.n	8005b52 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d316      	bcc.n	8005b52 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d20f      	bcs.n	8005b52 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2100      	movs	r1, #0
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fe9d 	bl	8006876 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b44:	2300      	movs	r3, #0
 8005b46:	2200      	movs	r2, #0
 8005b48:	2100      	movs	r1, #0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 fb1f 	bl	800718e <USBD_LL_PrepareReceive>
 8005b50:	e026      	b.n	8005ba0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d105      	bne.n	8005b74 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f001 fa5e 	bl	8007038 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fecf 	bl	8006920 <USBD_CtlReceiveStatus>
 8005b82:	e00d      	b.n	8005ba0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d004      	beq.n	8005b98 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f001 fa4c 	bl	8007038 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11d      	bne.n	8005be6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff fe81 	bl	80058b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bb8:	e015      	b.n	8005be6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d108      	bne.n	8005be2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	7afa      	ldrb	r2, [r7, #11]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	4798      	blx	r3
 8005be0:	e001      	b.n	8005be6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005be2:	2302      	movs	r3, #2
 8005be4:	e000      	b.n	8005be8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 f9d5 	bl	8006fae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c14:	2340      	movs	r3, #64	; 0x40
 8005c16:	2200      	movs	r2, #0
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f9c7 	bl	8006fae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2240      	movs	r2, #64	; 0x40
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6852      	ldr	r2, [r2, #4]
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	4611      	mov	r1, r2
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
  }

  return USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d105      	bne.n	8005cd6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d10b      	bne.n	8005d0c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d005      	beq.n	8005d3e <USBD_StdDevReq+0x26>
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d84f      	bhi.n	8005dd6 <USBD_StdDevReq+0xbe>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <USBD_StdDevReq+0x36>
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d14b      	bne.n	8005dd6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
      break;
 8005d4c:	e048      	b.n	8005de0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d839      	bhi.n	8005dca <USBD_StdDevReq+0xb2>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <USBD_StdDevReq+0x44>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005dc1 	.word	0x08005dc1
 8005d64:	08005dcb 	.word	0x08005dcb
 8005d68:	08005db7 	.word	0x08005db7
 8005d6c:	08005dcb 	.word	0x08005dcb
 8005d70:	08005d8f 	.word	0x08005d8f
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005dcb 	.word	0x08005dcb
 8005d7c:	08005da3 	.word	0x08005da3
 8005d80:	08005d99 	.word	0x08005d99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f9dc 	bl	8006144 <USBD_GetDescriptor>
          break;
 8005d8c:	e022      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb3f 	bl	8006414 <USBD_SetAddress>
          break;
 8005d96:	e01d      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fb7e 	bl	800649c <USBD_SetConfig>
          break;
 8005da0:	e018      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fc07 	bl	80065b8 <USBD_GetConfig>
          break;
 8005daa:	e013      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fc37 	bl	8006622 <USBD_GetStatus>
          break;
 8005db4:	e00e      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fc65 	bl	8006688 <USBD_SetFeature>
          break;
 8005dbe:	e009      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fc74 	bl	80066b0 <USBD_ClrFeature>
          break;
 8005dc8:	e004      	b.n	8005dd4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fccc 	bl	800676a <USBD_CtlError>
          break;
 8005dd2:	bf00      	nop
      }
      break;
 8005dd4:	e004      	b.n	8005de0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fcc6 	bl	800676a <USBD_CtlError>
      break;
 8005dde:	bf00      	nop
  }

  return ret;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop

08005dec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d005      	beq.n	8005e12 <USBD_StdItfReq+0x26>
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d82e      	bhi.n	8005e68 <USBD_StdItfReq+0x7c>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <USBD_StdItfReq+0x26>
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d12a      	bne.n	8005e68 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d81d      	bhi.n	8005e5a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	889b      	ldrh	r3, [r3, #4]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d813      	bhi.n	8005e50 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	88db      	ldrh	r3, [r3, #6]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d110      	bne.n	8005e64 <USBD_StdItfReq+0x78>
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fd56 	bl	80068fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e4e:	e009      	b.n	8005e64 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fc89 	bl	800676a <USBD_CtlError>
          break;
 8005e58:	e004      	b.n	8005e64 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fc84 	bl	800676a <USBD_CtlError>
          break;
 8005e62:	e000      	b.n	8005e66 <USBD_StdItfReq+0x7a>
          break;
 8005e64:	bf00      	nop
      }
      break;
 8005e66:	e004      	b.n	8005e72 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fc7d 	bl	800676a <USBD_CtlError>
      break;
 8005e70:	bf00      	nop
  }

  return USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	889b      	ldrh	r3, [r3, #4]
 8005e8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d007      	beq.n	8005eac <USBD_StdEPReq+0x30>
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	f200 8146 	bhi.w	800612e <USBD_StdEPReq+0x2b2>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <USBD_StdEPReq+0x40>
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	f040 8141 	bne.w	800612e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
      break;
 8005eba:	e13d      	b.n	8006138 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d10a      	bne.n	8005ede <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	e12d      	b.n	800613a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d007      	beq.n	8005ef6 <USBD_StdEPReq+0x7a>
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	f300 811b 	bgt.w	8006122 <USBD_StdEPReq+0x2a6>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d072      	beq.n	8005fd6 <USBD_StdEPReq+0x15a>
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d03a      	beq.n	8005f6a <USBD_StdEPReq+0xee>
 8005ef4:	e115      	b.n	8006122 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d002      	beq.n	8005f06 <USBD_StdEPReq+0x8a>
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d015      	beq.n	8005f30 <USBD_StdEPReq+0xb4>
 8005f04:	e02b      	b.n	8005f5e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00c      	beq.n	8005f26 <USBD_StdEPReq+0xaa>
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d009      	beq.n	8005f26 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f12:	7bbb      	ldrb	r3, [r7, #14]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 f88e 	bl	8007038 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f1c:	2180      	movs	r1, #128	; 0x80
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f88a 	bl	8007038 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f24:	e020      	b.n	8005f68 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc1e 	bl	800676a <USBD_CtlError>
              break;
 8005f2e:	e01b      	b.n	8005f68 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	885b      	ldrh	r3, [r3, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10e      	bne.n	8005f56 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <USBD_StdEPReq+0xda>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d008      	beq.n	8005f56 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	88db      	ldrh	r3, [r3, #6]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 f871 	bl	8007038 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fccf 	bl	80068fa <USBD_CtlSendStatus>

              break;
 8005f5c:	e004      	b.n	8005f68 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fc02 	bl	800676a <USBD_CtlError>
              break;
 8005f66:	bf00      	nop
          }
          break;
 8005f68:	e0e0      	b.n	800612c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d002      	beq.n	8005f7a <USBD_StdEPReq+0xfe>
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d015      	beq.n	8005fa4 <USBD_StdEPReq+0x128>
 8005f78:	e026      	b.n	8005fc8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00c      	beq.n	8005f9a <USBD_StdEPReq+0x11e>
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	2b80      	cmp	r3, #128	; 0x80
 8005f84:	d009      	beq.n	8005f9a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 f854 	bl	8007038 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 f850 	bl	8007038 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f98:	e01c      	b.n	8005fd4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fbe4 	bl	800676a <USBD_CtlError>
              break;
 8005fa2:	e017      	b.n	8005fd4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	885b      	ldrh	r3, [r3, #2]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d112      	bne.n	8005fd2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 f85b 	bl	8007076 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fc9a 	bl	80068fa <USBD_CtlSendStatus>
              }
              break;
 8005fc6:	e004      	b.n	8005fd2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fbcd 	bl	800676a <USBD_CtlError>
              break;
 8005fd0:	e000      	b.n	8005fd4 <USBD_StdEPReq+0x158>
              break;
 8005fd2:	bf00      	nop
          }
          break;
 8005fd4:	e0aa      	b.n	800612c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d002      	beq.n	8005fe6 <USBD_StdEPReq+0x16a>
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d032      	beq.n	800604a <USBD_StdEPReq+0x1ce>
 8005fe4:	e097      	b.n	8006116 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <USBD_StdEPReq+0x180>
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d004      	beq.n	8005ffc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fbb8 	bl	800676a <USBD_CtlError>
                break;
 8005ffa:	e091      	b.n	8006120 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da0b      	bge.n	800601c <USBD_StdEPReq+0x1a0>
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	3310      	adds	r3, #16
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	3304      	adds	r3, #4
 800601a:	e00b      	b.n	8006034 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	3304      	adds	r3, #4
 8006034:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2202      	movs	r2, #2
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fbfb 	bl	800683e <USBD_CtlSendData>
              break;
 8006048:	e06a      	b.n	8006120 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800604a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da11      	bge.n	8006076 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	3318      	adds	r3, #24
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d117      	bne.n	800609c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb7b 	bl	800676a <USBD_CtlError>
                  break;
 8006074:	e054      	b.n	8006120 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fb68 	bl	800676a <USBD_CtlError>
                  break;
 800609a:	e041      	b.n	8006120 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800609c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da0b      	bge.n	80060bc <USBD_StdEPReq+0x240>
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	3310      	adds	r3, #16
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	e00b      	b.n	80060d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	3304      	adds	r3, #4
 80060d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060d6:	7bbb      	ldrb	r3, [r7, #14]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <USBD_StdEPReq+0x266>
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	2b80      	cmp	r3, #128	; 0x80
 80060e0:	d103      	bne.n	80060ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e00e      	b.n	8006108 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 ffe0 	bl	80070b4 <USBD_LL_IsStallEP>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2201      	movs	r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	e002      	b.n	8006108 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2202      	movs	r2, #2
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fb95 	bl	800683e <USBD_CtlSendData>
              break;
 8006114:	e004      	b.n	8006120 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb26 	bl	800676a <USBD_CtlError>
              break;
 800611e:	bf00      	nop
          }
          break;
 8006120:	e004      	b.n	800612c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fb20 	bl	800676a <USBD_CtlError>
          break;
 800612a:	bf00      	nop
      }
      break;
 800612c:	e004      	b.n	8006138 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fb1a 	bl	800676a <USBD_CtlError>
      break;
 8006136:	bf00      	nop
  }

  return ret;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	885b      	ldrh	r3, [r3, #2]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	2b06      	cmp	r3, #6
 8006166:	f200 8128 	bhi.w	80063ba <USBD_GetDescriptor+0x276>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <USBD_GetDescriptor+0x2c>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	0800618d 	.word	0x0800618d
 8006174:	080061a5 	.word	0x080061a5
 8006178:	080061e5 	.word	0x080061e5
 800617c:	080063bb 	.word	0x080063bb
 8006180:	080063bb 	.word	0x080063bb
 8006184:	0800635b 	.word	0x0800635b
 8006188:	08006387 	.word	0x08006387
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
      break;
 80061a2:	e112      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	7c1b      	ldrb	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10d      	bne.n	80061c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
 80061bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	2202      	movs	r2, #2
 80061c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061c6:	e100      	b.n	80063ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	f107 0208 	add.w	r2, r7, #8
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
 80061d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	2202      	movs	r2, #2
 80061e0:	701a      	strb	r2, [r3, #0]
      break;
 80061e2:	e0f2      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	f200 80ac 	bhi.w	8006348 <USBD_GetDescriptor+0x204>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <USBD_GetDescriptor+0xb4>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006211 	.word	0x08006211
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006279 	.word	0x08006279
 8006204:	080062ad 	.word	0x080062ad
 8006208:	080062e1 	.word	0x080062e1
 800620c:	08006315 	.word	0x08006315
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00b      	beq.n	8006234 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	7c12      	ldrb	r2, [r2, #16]
 8006228:	f107 0108 	add.w	r1, r7, #8
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
 8006230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006232:	e091      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa97 	bl	800676a <USBD_CtlError>
            err++;
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	3301      	adds	r3, #1
 8006240:	72fb      	strb	r3, [r7, #11]
          break;
 8006242:	e089      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	7c12      	ldrb	r2, [r2, #16]
 800625c:	f107 0108 	add.w	r1, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006266:	e077      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa7d 	bl	800676a <USBD_CtlError>
            err++;
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	3301      	adds	r3, #1
 8006274:	72fb      	strb	r3, [r7, #11]
          break;
 8006276:	e06f      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	7c12      	ldrb	r2, [r2, #16]
 8006290:	f107 0108 	add.w	r1, r7, #8
 8006294:	4610      	mov	r0, r2
 8006296:	4798      	blx	r3
 8006298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800629a:	e05d      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fa63 	bl	800676a <USBD_CtlError>
            err++;
 80062a4:	7afb      	ldrb	r3, [r7, #11]
 80062a6:	3301      	adds	r3, #1
 80062a8:	72fb      	strb	r3, [r7, #11]
          break;
 80062aa:	e055      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	7c12      	ldrb	r2, [r2, #16]
 80062c4:	f107 0108 	add.w	r1, r7, #8
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ce:	e043      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa49 	bl	800676a <USBD_CtlError>
            err++;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	3301      	adds	r3, #1
 80062dc:	72fb      	strb	r3, [r7, #11]
          break;
 80062de:	e03b      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7c12      	ldrb	r2, [r2, #16]
 80062f8:	f107 0108 	add.w	r1, r7, #8
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006302:	e029      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa2f 	bl	800676a <USBD_CtlError>
            err++;
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	3301      	adds	r3, #1
 8006310:	72fb      	strb	r3, [r7, #11]
          break;
 8006312:	e021      	b.n	8006358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006336:	e00f      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa15 	bl	800676a <USBD_CtlError>
            err++;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	3301      	adds	r3, #1
 8006344:	72fb      	strb	r3, [r7, #11]
          break;
 8006346:	e007      	b.n	8006358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa0d 	bl	800676a <USBD_CtlError>
          err++;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3301      	adds	r3, #1
 8006354:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006356:	e038      	b.n	80063ca <USBD_GetDescriptor+0x286>
 8006358:	e037      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	7c1b      	ldrb	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	f107 0208 	add.w	r2, r7, #8
 800636e:	4610      	mov	r0, r2
 8006370:	4798      	blx	r3
 8006372:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006374:	e029      	b.n	80063ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f9f6 	bl	800676a <USBD_CtlError>
        err++;
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	3301      	adds	r3, #1
 8006382:	72fb      	strb	r3, [r7, #11]
      break;
 8006384:	e021      	b.n	80063ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7c1b      	ldrb	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10d      	bne.n	80063aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f107 0208 	add.w	r2, r7, #8
 800639a:	4610      	mov	r0, r2
 800639c:	4798      	blx	r3
 800639e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	2207      	movs	r2, #7
 80063a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063a8:	e00f      	b.n	80063ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9dc 	bl	800676a <USBD_CtlError>
        err++;
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	3301      	adds	r3, #1
 80063b6:	72fb      	strb	r3, [r7, #11]
      break;
 80063b8:	e007      	b.n	80063ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f9d4 	bl	800676a <USBD_CtlError>
      err++;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	3301      	adds	r3, #1
 80063c6:	72fb      	strb	r3, [r7, #11]
      break;
 80063c8:	bf00      	nop
  }

  if (err != 0U)
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11c      	bne.n	800640a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80063d0:	893b      	ldrh	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <USBD_GetDescriptor+0x2b6>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	88db      	ldrh	r3, [r3, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	88da      	ldrh	r2, [r3, #6]
 80063e2:	893b      	ldrh	r3, [r7, #8]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	bf28      	it	cs
 80063e8:	4613      	movcs	r3, r2
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063ee:	893b      	ldrh	r3, [r7, #8]
 80063f0:	461a      	mov	r2, r3
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa22 	bl	800683e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	88db      	ldrh	r3, [r3, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa79 	bl	80068fa <USBD_CtlSendStatus>
 8006408:	e000      	b.n	800640c <USBD_GetDescriptor+0x2c8>
    return;
 800640a:	bf00      	nop
    }
  }
}
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop

08006414 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	889b      	ldrh	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d130      	bne.n	8006488 <USBD_SetAddress+0x74>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	88db      	ldrh	r3, [r3, #6]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d12c      	bne.n	8006488 <USBD_SetAddress+0x74>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	885b      	ldrh	r3, [r3, #2]
 8006432:	2b7f      	cmp	r3, #127	; 0x7f
 8006434:	d828      	bhi.n	8006488 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006440:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	2b03      	cmp	r3, #3
 800644a:	d104      	bne.n	8006456 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f98b 	bl	800676a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006454:	e01d      	b.n	8006492 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fe51 	bl	800710a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fa46 	bl	80068fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647c:	e009      	b.n	8006492 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006486:	e004      	b.n	8006492 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f96d 	bl	800676a <USBD_CtlError>
  }
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	885b      	ldrh	r3, [r3, #2]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	4b41      	ldr	r3, [pc, #260]	; (80065b4 <USBD_SetConfig+0x118>)
 80064ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064b0:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <USBD_SetConfig+0x118>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d904      	bls.n	80064c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f955 	bl	800676a <USBD_CtlError>
 80064c0:	e075      	b.n	80065ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d002      	beq.n	80064d2 <USBD_SetConfig+0x36>
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d023      	beq.n	8006518 <USBD_SetConfig+0x7c>
 80064d0:	e062      	b.n	8006598 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80064d2:	4b38      	ldr	r3, [pc, #224]	; (80065b4 <USBD_SetConfig+0x118>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01a      	beq.n	8006510 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80064da:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <USBD_SetConfig+0x118>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2203      	movs	r2, #3
 80064e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80064ec:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <USBD_SetConfig+0x118>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f9e7 	bl	80058c6 <USBD_SetClassConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d104      	bne.n	8006508 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f932 	bl	800676a <USBD_CtlError>
            return;
 8006506:	e052      	b.n	80065ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9f6 	bl	80068fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800650e:	e04e      	b.n	80065ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f9f2 	bl	80068fa <USBD_CtlSendStatus>
        break;
 8006516:	e04a      	b.n	80065ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006518:	4b26      	ldr	r3, [pc, #152]	; (80065b4 <USBD_SetConfig+0x118>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d112      	bne.n	8006546 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006528:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <USBD_SetConfig+0x118>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006532:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <USBD_SetConfig+0x118>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff f9e3 	bl	8005904 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9db 	bl	80068fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006544:	e033      	b.n	80065ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <USBD_SetConfig+0x118>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d01d      	beq.n	8006590 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff f9d1 	bl	8005904 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006562:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <USBD_SetConfig+0x118>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <USBD_SetConfig+0x118>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff f9a7 	bl	80058c6 <USBD_SetClassConfig>
 8006578:	4603      	mov	r3, r0
 800657a:	2b02      	cmp	r3, #2
 800657c:	d104      	bne.n	8006588 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8f2 	bl	800676a <USBD_CtlError>
            return;
 8006586:	e012      	b.n	80065ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f9b6 	bl	80068fa <USBD_CtlSendStatus>
        break;
 800658e:	e00e      	b.n	80065ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f9b2 	bl	80068fa <USBD_CtlSendStatus>
        break;
 8006596:	e00a      	b.n	80065ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8e5 	bl	800676a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <USBD_SetConfig+0x118>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff f9ac 	bl	8005904 <USBD_ClrClassConfig>
        break;
 80065ac:	bf00      	nop
    }
  }
}
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000244 	.word	0x20000244

080065b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	88db      	ldrh	r3, [r3, #6]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d004      	beq.n	80065d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f8cc 	bl	800676a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065d2:	e022      	b.n	800661a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	2b02      	cmp	r3, #2
 80065dc:	dc02      	bgt.n	80065e4 <USBD_GetConfig+0x2c>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dc03      	bgt.n	80065ea <USBD_GetConfig+0x32>
 80065e2:	e015      	b.n	8006610 <USBD_GetConfig+0x58>
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d00b      	beq.n	8006600 <USBD_GetConfig+0x48>
 80065e8:	e012      	b.n	8006610 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3308      	adds	r3, #8
 80065f4:	2201      	movs	r2, #1
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f920 	bl	800683e <USBD_CtlSendData>
        break;
 80065fe:	e00c      	b.n	800661a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	2201      	movs	r2, #1
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f918 	bl	800683e <USBD_CtlSendData>
        break;
 800660e:	e004      	b.n	800661a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8a9 	bl	800676a <USBD_CtlError>
        break;
 8006618:	bf00      	nop
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006632:	3b01      	subs	r3, #1
 8006634:	2b02      	cmp	r3, #2
 8006636:	d81e      	bhi.n	8006676 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	88db      	ldrh	r3, [r3, #6]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d004      	beq.n	800664a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f891 	bl	800676a <USBD_CtlError>
        break;
 8006648:	e01a      	b.n	8006680 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	330c      	adds	r3, #12
 800666a:	2202      	movs	r2, #2
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8e5 	bl	800683e <USBD_CtlSendData>
      break;
 8006674:	e004      	b.n	8006680 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f876 	bl	800676a <USBD_CtlError>
      break;
 800667e:	bf00      	nop
  }
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d106      	bne.n	80066a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f929 	bl	80068fa <USBD_CtlSendStatus>
  }
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c0:	3b01      	subs	r3, #1
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d80b      	bhi.n	80066de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	885b      	ldrh	r3, [r3, #2]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d10c      	bne.n	80066e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f90f 	bl	80068fa <USBD_CtlSendStatus>
      }
      break;
 80066dc:	e004      	b.n	80066e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f842 	bl	800676a <USBD_CtlError>
      break;
 80066e6:	e000      	b.n	80066ea <USBD_ClrFeature+0x3a>
      break;
 80066e8:	bf00      	nop
  }
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	785a      	ldrb	r2, [r3, #1]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	3302      	adds	r3, #2
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b29a      	uxth	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	3303      	adds	r3, #3
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	b29b      	uxth	r3, r3
 8006720:	4413      	add	r3, r2
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	3304      	adds	r3, #4
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b29a      	uxth	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	3305      	adds	r3, #5
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	b29b      	uxth	r3, r3
 800673c:	4413      	add	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3306      	adds	r3, #6
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b29a      	uxth	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	3307      	adds	r3, #7
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	b29b      	uxth	r3, r3
 8006758:	4413      	add	r3, r2
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	80da      	strh	r2, [r3, #6]

}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr

0800676a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006774:	2180      	movs	r1, #128	; 0x80
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fc5e 	bl	8007038 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc5a 	bl	8007038 <USBD_LL_StallEP>
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d032      	beq.n	8006808 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f834 	bl	8006810 <USBD_GetLen>
 80067a8:	4603      	mov	r3, r0
 80067aa:	3301      	adds	r3, #1
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	75fa      	strb	r2, [r7, #23]
 80067bc:	461a      	mov	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	75fa      	strb	r2, [r7, #23]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4413      	add	r3, r2
 80067d4:	2203      	movs	r2, #3
 80067d6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80067d8:	e012      	b.n	8006800 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	60fa      	str	r2, [r7, #12]
 80067e0:	7dfa      	ldrb	r2, [r7, #23]
 80067e2:	1c51      	adds	r1, r2, #1
 80067e4:	75f9      	strb	r1, [r7, #23]
 80067e6:	4611      	mov	r1, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	440a      	add	r2, r1
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	75fa      	strb	r2, [r7, #23]
 80067f6:	461a      	mov	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4413      	add	r3, r2
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e8      	bne.n	80067da <USBD_GetString+0x4e>
    }
  }
}
 8006808:	bf00      	nop
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800681c:	e005      	b.n	800682a <USBD_GetLen+0x1a>
  {
    len++;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	3301      	adds	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f5      	bne.n	800681e <USBD_GetLen+0xe>
  }

  return len;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	4613      	mov	r3, r2
 800684a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2202      	movs	r2, #2
 8006850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006854:	88fa      	ldrh	r2, [r7, #6]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	2100      	movs	r1, #0
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fc6e 	bl	8007148 <USBD_LL_Transmit>

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	2100      	movs	r1, #0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fc5c 	bl	8007148 <USBD_LL_Transmit>

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2203      	movs	r2, #3
 80068ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068b0:	88fa      	ldrh	r2, [r7, #6]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80068b8:	88fa      	ldrh	r2, [r7, #6]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	2100      	movs	r1, #0
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fc61 	bl	800718e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	4613      	mov	r3, r2
 80068e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	2100      	movs	r1, #0
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fc4f 	bl	800718e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2204      	movs	r2, #4
 8006906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800690a:	2300      	movs	r3, #0
 800690c:	2200      	movs	r2, #0
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fc19 	bl	8007148 <USBD_LL_Transmit>

  return USBD_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2205      	movs	r2, #5
 800692c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006930:	2300      	movs	r3, #0
 8006932:	2200      	movs	r2, #0
 8006934:	2100      	movs	r1, #0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fc29 	bl	800718e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800694c:	2200      	movs	r2, #0
 800694e:	4912      	ldr	r1, [pc, #72]	; (8006998 <MX_USB_DEVICE_Init+0x50>)
 8006950:	4812      	ldr	r0, [pc, #72]	; (800699c <MX_USB_DEVICE_Init+0x54>)
 8006952:	f7fe ff5e 	bl	8005812 <USBD_Init>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800695c:	f7f9 fc9a 	bl	8000294 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006960:	490f      	ldr	r1, [pc, #60]	; (80069a0 <MX_USB_DEVICE_Init+0x58>)
 8006962:	480e      	ldr	r0, [pc, #56]	; (800699c <MX_USB_DEVICE_Init+0x54>)
 8006964:	f7fe ff80 	bl	8005868 <USBD_RegisterClass>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800696e:	f7f9 fc91 	bl	8000294 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006972:	490c      	ldr	r1, [pc, #48]	; (80069a4 <MX_USB_DEVICE_Init+0x5c>)
 8006974:	4809      	ldr	r0, [pc, #36]	; (800699c <MX_USB_DEVICE_Init+0x54>)
 8006976:	f7fe feb1 	bl	80056dc <USBD_CDC_RegisterInterface>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006980:	f7f9 fc88 	bl	8000294 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006984:	4805      	ldr	r0, [pc, #20]	; (800699c <MX_USB_DEVICE_Init+0x54>)
 8006986:	f7fe ff88 	bl	800589a <USBD_Start>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006990:	f7f9 fc80 	bl	8000294 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006994:	bf00      	nop
 8006996:	bd80      	pop	{r7, pc}
 8006998:	2000012c 	.word	0x2000012c
 800699c:	20000248 	.word	0x20000248
 80069a0:	20000018 	.word	0x20000018
 80069a4:	2000011c 	.word	0x2000011c

080069a8 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069ac:	2200      	movs	r2, #0
 80069ae:	4905      	ldr	r1, [pc, #20]	; (80069c4 <CDC_Init_FS+0x1c>)
 80069b0:	4805      	ldr	r0, [pc, #20]	; (80069c8 <CDC_Init_FS+0x20>)
 80069b2:	f7fe fea9 	bl	8005708 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069b6:	4905      	ldr	r1, [pc, #20]	; (80069cc <CDC_Init_FS+0x24>)
 80069b8:	4803      	ldr	r0, [pc, #12]	; (80069c8 <CDC_Init_FS+0x20>)
 80069ba:	f7fe febe 	bl	800573a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80069be:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	2000090c 	.word	0x2000090c
 80069c8:	20000248 	.word	0x20000248
 80069cc:	2000050c 	.word	0x2000050c

080069d0 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80069d4:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
	...

080069e0 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
 80069ec:	4613      	mov	r3, r2
 80069ee:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	2b23      	cmp	r3, #35	; 0x23
 80069f4:	d84a      	bhi.n	8006a8c <CDC_Control_FS+0xac>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <CDC_Control_FS+0x1c>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a8d 	.word	0x08006a8d
 8006a00:	08006a8d 	.word	0x08006a8d
 8006a04:	08006a8d 	.word	0x08006a8d
 8006a08:	08006a8d 	.word	0x08006a8d
 8006a0c:	08006a8d 	.word	0x08006a8d
 8006a10:	08006a8d 	.word	0x08006a8d
 8006a14:	08006a8d 	.word	0x08006a8d
 8006a18:	08006a8d 	.word	0x08006a8d
 8006a1c:	08006a8d 	.word	0x08006a8d
 8006a20:	08006a8d 	.word	0x08006a8d
 8006a24:	08006a8d 	.word	0x08006a8d
 8006a28:	08006a8d 	.word	0x08006a8d
 8006a2c:	08006a8d 	.word	0x08006a8d
 8006a30:	08006a8d 	.word	0x08006a8d
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	08006a8d 	.word	0x08006a8d
 8006a44:	08006a8d 	.word	0x08006a8d
 8006a48:	08006a8d 	.word	0x08006a8d
 8006a4c:	08006a8d 	.word	0x08006a8d
 8006a50:	08006a8d 	.word	0x08006a8d
 8006a54:	08006a8d 	.word	0x08006a8d
 8006a58:	08006a8d 	.word	0x08006a8d
 8006a5c:	08006a8d 	.word	0x08006a8d
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006a8d 	.word	0x08006a8d
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a8d 	.word	0x08006a8d
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	08006a8d 	.word	0x08006a8d
 8006a78:	08006a8d 	.word	0x08006a8d
 8006a7c:	08006a8d 	.word	0x08006a8d
 8006a80:	08006a8d 	.word	0x08006a8d
 8006a84:	08006a8d 	.word	0x08006a8d
 8006a88:	08006a8d 	.word	0x08006a8d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006a8c:	bf00      	nop
	}

	return (USBD_OK);
 8006a8e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop

08006a9c <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4809      	ldr	r0, [pc, #36]	; (8006ad0 <CDC_Receive_FS+0x34>)
 8006aaa:	f7fe fe46 	bl	800573a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006aae:	4808      	ldr	r0, [pc, #32]	; (8006ad0 <CDC_Receive_FS+0x34>)
 8006ab0:	f7fe fe85 	bl	80057be <USBD_CDC_ReceivePacket>
	uint8_t len = (uint8_t*) Len;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer, Buf, len);
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	461a      	mov	r2, r3
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4805      	ldr	r0, [pc, #20]	; (8006ad4 <CDC_Receive_FS+0x38>)
 8006ac0:	f000 fc12 	bl	80072e8 <memcpy>
	return (USBD_OK);
 8006ac4:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000248 	.word	0x20000248
 8006ad4:	200001fc 	.word	0x200001fc

08006ad8 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <CDC_Transmit_FS+0x48>)
 8006aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aee:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e00b      	b.n	8006b16 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4806      	ldr	r0, [pc, #24]	; (8006b20 <CDC_Transmit_FS+0x48>)
 8006b06:	f7fe fdff 	bl	8005708 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b0a:	4805      	ldr	r0, [pc, #20]	; (8006b20 <CDC_Transmit_FS+0x48>)
 8006b0c:	f7fe fe28 	bl	8005760 <USBD_CDC_TransmitPacket>
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000248 	.word	0x20000248

08006b24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2212      	movs	r2, #18
 8006b34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000148 	.word	0x20000148

08006b48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	6039      	str	r1, [r7, #0]
 8006b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2204      	movs	r2, #4
 8006b58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b5a:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	2000015c 	.word	0x2000015c

08006b6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4907      	ldr	r1, [pc, #28]	; (8006ba0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b82:	4808      	ldr	r0, [pc, #32]	; (8006ba4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b84:	f7ff fe02 	bl	800678c <USBD_GetString>
 8006b88:	e004      	b.n	8006b94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4904      	ldr	r1, [pc, #16]	; (8006ba0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b8e:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b90:	f7ff fdfc 	bl	800678c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000d0c 	.word	0x20000d0c
 8006ba4:	08007c14 	.word	0x08007c14

08006ba8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	6039      	str	r1, [r7, #0]
 8006bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	4904      	ldr	r1, [pc, #16]	; (8006bc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bb8:	4804      	ldr	r0, [pc, #16]	; (8006bcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bba:	f7ff fde7 	bl	800678c <USBD_GetString>
  return USBD_StrDesc;
 8006bbe:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000d0c 	.word	0x20000d0c
 8006bcc:	08007c2c 	.word	0x08007c2c

08006bd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	221a      	movs	r2, #26
 8006be0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006be2:	f000 f843 	bl	8006c6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006be6:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000160 	.word	0x20000160

08006bf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4907      	ldr	r1, [pc, #28]	; (8006c28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c0a:	4808      	ldr	r0, [pc, #32]	; (8006c2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c0c:	f7ff fdbe 	bl	800678c <USBD_GetString>
 8006c10:	e004      	b.n	8006c1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4904      	ldr	r1, [pc, #16]	; (8006c28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c18:	f7ff fdb8 	bl	800678c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c1c:	4b02      	ldr	r3, [pc, #8]	; (8006c28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000d0c 	.word	0x20000d0c
 8006c2c:	08007c40 	.word	0x08007c40

08006c30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	6039      	str	r1, [r7, #0]
 8006c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	4907      	ldr	r1, [pc, #28]	; (8006c64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c46:	4808      	ldr	r0, [pc, #32]	; (8006c68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c48:	f7ff fda0 	bl	800678c <USBD_GetString>
 8006c4c:	e004      	b.n	8006c58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4904      	ldr	r1, [pc, #16]	; (8006c64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c52:	4805      	ldr	r0, [pc, #20]	; (8006c68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c54:	f7ff fd9a 	bl	800678c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000d0c 	.word	0x20000d0c
 8006c68:	08007c4c 	.word	0x08007c4c

08006c6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <Get_SerialNum+0x44>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c78:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <Get_SerialNum+0x48>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <Get_SerialNum+0x4c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c92:	2208      	movs	r2, #8
 8006c94:	4909      	ldr	r1, [pc, #36]	; (8006cbc <Get_SerialNum+0x50>)
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f814 	bl	8006cc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	4908      	ldr	r1, [pc, #32]	; (8006cc0 <Get_SerialNum+0x54>)
 8006ca0:	68b8      	ldr	r0, [r7, #8]
 8006ca2:	f000 f80f 	bl	8006cc4 <IntToUnicode>
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	1ffff7e8 	.word	0x1ffff7e8
 8006cb4:	1ffff7ec 	.word	0x1ffff7ec
 8006cb8:	1ffff7f0 	.word	0x1ffff7f0
 8006cbc:	20000162 	.word	0x20000162
 8006cc0:	20000172 	.word	0x20000172

08006cc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]
 8006cda:	e027      	b.n	8006d2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	0f1b      	lsrs	r3, r3, #28
 8006ce0:	2b09      	cmp	r3, #9
 8006ce2:	d80b      	bhi.n	8006cfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	0f1b      	lsrs	r3, r3, #28
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	440b      	add	r3, r1
 8006cf4:	3230      	adds	r2, #48	; 0x30
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e00a      	b.n	8006d12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	0f1b      	lsrs	r3, r3, #28
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4619      	mov	r1, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3237      	adds	r2, #55	; 0x37
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4413      	add	r3, r2
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
 8006d2c:	7dfa      	ldrb	r2, [r7, #23]
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d3d3      	bcc.n	8006cdc <IntToUnicode+0x18>
  }
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a0d      	ldr	r2, [pc, #52]	; (8006d84 <HAL_PCD_MspInit+0x44>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d113      	bne.n	8006d7a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d52:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <HAL_PCD_MspInit+0x48>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <HAL_PCD_MspInit+0x48>)
 8006d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d5c:	61d3      	str	r3, [r2, #28]
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <HAL_PCD_MspInit+0x48>)
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	2014      	movs	r0, #20
 8006d70:	f7f9 fcb9 	bl	80006e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d74:	2014      	movs	r0, #20
 8006d76:	f7f9 fcd2 	bl	800071e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40005c00 	.word	0x40005c00
 8006d88:	40021000 	.word	0x40021000

08006d8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fe fdc1 	bl	800592a <USBD_LL_SetupStage>
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	440b      	add	r3, r1
 8006dd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f7fe fdf3 	bl	80059c4 <USBD_LL_DataOutStage>
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	440b      	add	r3, r1
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7fe fe4a 	bl	8005aa6 <USBD_LL_DataInStage>
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe ff5a 	bl	8005ce2 <USBD_LL_SOF>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	799b      	ldrb	r3, [r3, #6]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d001      	beq.n	8006e4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e4a:	f7f9 fa23 	bl	8000294 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e54:	7bfa      	ldrb	r2, [r7, #15]
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe ff0a 	bl	8005c72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe fec3 	bl	8005bf0 <USBD_LL_Reset>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe ff04 	bl	8005c90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7a9b      	ldrb	r3, [r3, #10]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <HAL_PCD_SuspendCallback+0x30>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	4a03      	ldr	r2, [pc, #12]	; (8006ea4 <HAL_PCD_SuspendCallback+0x30>)
 8006e96:	f043 0306 	orr.w	r3, r3, #6
 8006e9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	e000ed00 	.word	0xe000ed00

08006ea8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fefe 	bl	8005cb8 <USBD_LL_Resume>
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ecc:	4a28      	ldr	r2, [pc, #160]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a26      	ldr	r2, [pc, #152]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ed8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006edc:	4b24      	ldr	r3, [pc, #144]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ede:	4a25      	ldr	r2, [pc, #148]	; (8006f74 <USBD_LL_Init+0xb0>)
 8006ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006ee2:	4b23      	ldr	r3, [pc, #140]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006ee8:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <USBD_LL_Init+0xac>)
 8006eea:	2202      	movs	r2, #2
 8006eec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006eee:	4b20      	ldr	r3, [pc, #128]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <USBD_LL_Init+0xac>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <USBD_LL_Init+0xac>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f00:	481b      	ldr	r0, [pc, #108]	; (8006f70 <USBD_LL_Init+0xac>)
 8006f02:	f7f9 fc26 	bl	8000752 <HAL_PCD_Init>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f0c:	f7f9 f9c2 	bl	8000294 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f16:	2318      	movs	r3, #24
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	f7fb f938 	bl	8002190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f26:	2358      	movs	r3, #88	; 0x58
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	f7fb f930 	bl	8002190 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f36:	23c0      	movs	r3, #192	; 0xc0
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2181      	movs	r1, #129	; 0x81
 8006f3c:	f7fb f928 	bl	8002190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	f7fb f91f 	bl	8002190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2182      	movs	r1, #130	; 0x82
 8006f60:	f7fb f916 	bl	8002190 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000f0c 	.word	0x20000f0c
 8006f74:	40005c00 	.word	0x40005c00

08006f78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7f9 fcd5 	bl	800093e <HAL_PCD_Start>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f94e 	bl	800723c <USBD_Get_USB_Status>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4611      	mov	r1, r2
 8006fba:	461a      	mov	r2, r3
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	70fb      	strb	r3, [r7, #3]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70bb      	strb	r3, [r7, #2]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fd6:	78bb      	ldrb	r3, [r7, #2]
 8006fd8:	883a      	ldrh	r2, [r7, #0]
 8006fda:	78f9      	ldrb	r1, [r7, #3]
 8006fdc:	f7f9 fe29 	bl	8000c32 <HAL_PCD_EP_Open>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f928 	bl	800723c <USBD_Get_USB_Status>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7f9 fe67 	bl	8000cec <HAL_PCD_EP_Close>
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f909 	bl	800723c <USBD_Get_USB_Status>
 800702a:	4603      	mov	r3, r0
 800702c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800702e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	4611      	mov	r1, r2
 8007056:	4618      	mov	r0, r3
 8007058:	f7f9 ff0f 	bl	8000e7a <HAL_PCD_EP_SetStall>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f8ea 	bl	800723c <USBD_Get_USB_Status>
 8007068:	4603      	mov	r3, r0
 800706a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800706c:	7bbb      	ldrb	r3, [r7, #14]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f7f9 ff50 	bl	8000f3a <HAL_PCD_EP_ClrStall>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f8cb 	bl	800723c <USBD_Get_USB_Status>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	da0b      	bge.n	80070e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	440b      	add	r3, r1
 80070e2:	3312      	adds	r3, #18
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	e00b      	b.n	8007100 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	440b      	add	r3, r1
 80070fa:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80070fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr

0800710a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f7f9 fd5e 	bl	8000bea <HAL_PCD_SetAddress>
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f881 	bl	800723c <USBD_Get_USB_Status>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800713e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	461a      	mov	r2, r3
 8007154:	460b      	mov	r3, r1
 8007156:	72fb      	strb	r3, [r7, #11]
 8007158:	4613      	mov	r3, r2
 800715a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800716a:	893b      	ldrh	r3, [r7, #8]
 800716c:	7af9      	ldrb	r1, [r7, #11]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	f7f9 fe4c 	bl	8000e0c <HAL_PCD_EP_Transmit>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f85e 	bl	800723c <USBD_Get_USB_Status>
 8007180:	4603      	mov	r3, r0
 8007182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007184:	7dbb      	ldrb	r3, [r7, #22]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	461a      	mov	r2, r3
 800719a:	460b      	mov	r3, r1
 800719c:	72fb      	strb	r3, [r7, #11]
 800719e:	4613      	mov	r3, r2
 80071a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071b0:	893b      	ldrh	r3, [r7, #8]
 80071b2:	7af9      	ldrb	r1, [r7, #11]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	f7f9 fde1 	bl	8000d7c <HAL_PCD_EP_Receive>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f83b 	bl	800723c <USBD_Get_USB_Status>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7f9 fdf7 	bl	8000dde <HAL_PCD_EP_GetRxCount>
 80071f0:	4603      	mov	r3, r0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <USBD_static_malloc+0x14>)
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	bc80      	pop	{r7}
 800720e:	4770      	bx	lr
 8007210:	200011e4 	.word	0x200011e4

08007214 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr

08007226 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d817      	bhi.n	8007280 <USBD_Get_USB_Status+0x44>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <USBD_Get_USB_Status+0x1c>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	08007269 	.word	0x08007269
 800725c:	0800726f 	.word	0x0800726f
 8007260:	08007275 	.word	0x08007275
 8007264:	0800727b 	.word	0x0800727b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
    break;
 800726c:	e00b      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	73fb      	strb	r3, [r7, #15]
    break;
 8007272:	e008      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
    break;
 8007278:	e005      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]
    break;
 800727e:	e002      	b.n	8007286 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007280:	2302      	movs	r3, #2
 8007282:	73fb      	strb	r3, [r7, #15]
    break;
 8007284:	bf00      	nop
  }
  return usb_status;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <__errno>:
 8007294:	4b01      	ldr	r3, [pc, #4]	; (800729c <__errno+0x8>)
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	2000017c 	.word	0x2000017c

080072a0 <__libc_init_array>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	2600      	movs	r6, #0
 80072a4:	4d0c      	ldr	r5, [pc, #48]	; (80072d8 <__libc_init_array+0x38>)
 80072a6:	4c0d      	ldr	r4, [pc, #52]	; (80072dc <__libc_init_array+0x3c>)
 80072a8:	1b64      	subs	r4, r4, r5
 80072aa:	10a4      	asrs	r4, r4, #2
 80072ac:	42a6      	cmp	r6, r4
 80072ae:	d109      	bne.n	80072c4 <__libc_init_array+0x24>
 80072b0:	f000 fc9c 	bl	8007bec <_init>
 80072b4:	2600      	movs	r6, #0
 80072b6:	4d0a      	ldr	r5, [pc, #40]	; (80072e0 <__libc_init_array+0x40>)
 80072b8:	4c0a      	ldr	r4, [pc, #40]	; (80072e4 <__libc_init_array+0x44>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	42a6      	cmp	r6, r4
 80072c0:	d105      	bne.n	80072ce <__libc_init_array+0x2e>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c8:	4798      	blx	r3
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7ee      	b.n	80072ac <__libc_init_array+0xc>
 80072ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d2:	4798      	blx	r3
 80072d4:	3601      	adds	r6, #1
 80072d6:	e7f2      	b.n	80072be <__libc_init_array+0x1e>
 80072d8:	08007cb4 	.word	0x08007cb4
 80072dc:	08007cb4 	.word	0x08007cb4
 80072e0:	08007cb4 	.word	0x08007cb4
 80072e4:	08007cb8 	.word	0x08007cb8

080072e8 <memcpy>:
 80072e8:	440a      	add	r2, r1
 80072ea:	4291      	cmp	r1, r2
 80072ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f0:	d100      	bne.n	80072f4 <memcpy+0xc>
 80072f2:	4770      	bx	lr
 80072f4:	b510      	push	{r4, lr}
 80072f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fa:	4291      	cmp	r1, r2
 80072fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007300:	d1f9      	bne.n	80072f6 <memcpy+0xe>
 8007302:	bd10      	pop	{r4, pc}

08007304 <memset>:
 8007304:	4603      	mov	r3, r0
 8007306:	4402      	add	r2, r0
 8007308:	4293      	cmp	r3, r2
 800730a:	d100      	bne.n	800730e <memset+0xa>
 800730c:	4770      	bx	lr
 800730e:	f803 1b01 	strb.w	r1, [r3], #1
 8007312:	e7f9      	b.n	8007308 <memset+0x4>

08007314 <siprintf>:
 8007314:	b40e      	push	{r1, r2, r3}
 8007316:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800731a:	b500      	push	{lr}
 800731c:	b09c      	sub	sp, #112	; 0x70
 800731e:	ab1d      	add	r3, sp, #116	; 0x74
 8007320:	9002      	str	r0, [sp, #8]
 8007322:	9006      	str	r0, [sp, #24]
 8007324:	9107      	str	r1, [sp, #28]
 8007326:	9104      	str	r1, [sp, #16]
 8007328:	4808      	ldr	r0, [pc, #32]	; (800734c <siprintf+0x38>)
 800732a:	4909      	ldr	r1, [pc, #36]	; (8007350 <siprintf+0x3c>)
 800732c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007330:	9105      	str	r1, [sp, #20]
 8007332:	6800      	ldr	r0, [r0, #0]
 8007334:	a902      	add	r1, sp, #8
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	f000 f868 	bl	800740c <_svfiprintf_r>
 800733c:	2200      	movs	r2, #0
 800733e:	9b02      	ldr	r3, [sp, #8]
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	b01c      	add	sp, #112	; 0x70
 8007344:	f85d eb04 	ldr.w	lr, [sp], #4
 8007348:	b003      	add	sp, #12
 800734a:	4770      	bx	lr
 800734c:	2000017c 	.word	0x2000017c
 8007350:	ffff0208 	.word	0xffff0208

08007354 <__ssputs_r>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	688e      	ldr	r6, [r1, #8]
 800735a:	4682      	mov	sl, r0
 800735c:	429e      	cmp	r6, r3
 800735e:	460c      	mov	r4, r1
 8007360:	4690      	mov	r8, r2
 8007362:	461f      	mov	r7, r3
 8007364:	d838      	bhi.n	80073d8 <__ssputs_r+0x84>
 8007366:	898a      	ldrh	r2, [r1, #12]
 8007368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800736c:	d032      	beq.n	80073d4 <__ssputs_r+0x80>
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	6909      	ldr	r1, [r1, #16]
 8007372:	3301      	adds	r3, #1
 8007374:	eba5 0901 	sub.w	r9, r5, r1
 8007378:	6965      	ldr	r5, [r4, #20]
 800737a:	444b      	add	r3, r9
 800737c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007384:	106d      	asrs	r5, r5, #1
 8007386:	429d      	cmp	r5, r3
 8007388:	bf38      	it	cc
 800738a:	461d      	movcc	r5, r3
 800738c:	0553      	lsls	r3, r2, #21
 800738e:	d531      	bpl.n	80073f4 <__ssputs_r+0xa0>
 8007390:	4629      	mov	r1, r5
 8007392:	f000 fb61 	bl	8007a58 <_malloc_r>
 8007396:	4606      	mov	r6, r0
 8007398:	b950      	cbnz	r0, 80073b0 <__ssputs_r+0x5c>
 800739a:	230c      	movs	r3, #12
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	f8ca 3000 	str.w	r3, [sl]
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b0:	464a      	mov	r2, r9
 80073b2:	6921      	ldr	r1, [r4, #16]
 80073b4:	f7ff ff98 	bl	80072e8 <memcpy>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6126      	str	r6, [r4, #16]
 80073c6:	444e      	add	r6, r9
 80073c8:	6026      	str	r6, [r4, #0]
 80073ca:	463e      	mov	r6, r7
 80073cc:	6165      	str	r5, [r4, #20]
 80073ce:	eba5 0509 	sub.w	r5, r5, r9
 80073d2:	60a5      	str	r5, [r4, #8]
 80073d4:	42be      	cmp	r6, r7
 80073d6:	d900      	bls.n	80073da <__ssputs_r+0x86>
 80073d8:	463e      	mov	r6, r7
 80073da:	4632      	mov	r2, r6
 80073dc:	4641      	mov	r1, r8
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	f000 fab8 	bl	8007954 <memmove>
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	2000      	movs	r0, #0
 80073e8:	1b9b      	subs	r3, r3, r6
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	4433      	add	r3, r6
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	e7db      	b.n	80073ac <__ssputs_r+0x58>
 80073f4:	462a      	mov	r2, r5
 80073f6:	f000 fba3 	bl	8007b40 <_realloc_r>
 80073fa:	4606      	mov	r6, r0
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1e1      	bne.n	80073c4 <__ssputs_r+0x70>
 8007400:	4650      	mov	r0, sl
 8007402:	6921      	ldr	r1, [r4, #16]
 8007404:	f000 fac0 	bl	8007988 <_free_r>
 8007408:	e7c7      	b.n	800739a <__ssputs_r+0x46>
	...

0800740c <_svfiprintf_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4698      	mov	r8, r3
 8007412:	898b      	ldrh	r3, [r1, #12]
 8007414:	4607      	mov	r7, r0
 8007416:	061b      	lsls	r3, r3, #24
 8007418:	460d      	mov	r5, r1
 800741a:	4614      	mov	r4, r2
 800741c:	b09d      	sub	sp, #116	; 0x74
 800741e:	d50e      	bpl.n	800743e <_svfiprintf_r+0x32>
 8007420:	690b      	ldr	r3, [r1, #16]
 8007422:	b963      	cbnz	r3, 800743e <_svfiprintf_r+0x32>
 8007424:	2140      	movs	r1, #64	; 0x40
 8007426:	f000 fb17 	bl	8007a58 <_malloc_r>
 800742a:	6028      	str	r0, [r5, #0]
 800742c:	6128      	str	r0, [r5, #16]
 800742e:	b920      	cbnz	r0, 800743a <_svfiprintf_r+0x2e>
 8007430:	230c      	movs	r3, #12
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e0d1      	b.n	80075de <_svfiprintf_r+0x1d2>
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	616b      	str	r3, [r5, #20]
 800743e:	2300      	movs	r3, #0
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	2320      	movs	r3, #32
 8007444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	f04f 0901 	mov.w	r9, #1
 800744e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007452:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075f8 <_svfiprintf_r+0x1ec>
 8007456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800745a:	4623      	mov	r3, r4
 800745c:	469a      	mov	sl, r3
 800745e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007462:	b10a      	cbz	r2, 8007468 <_svfiprintf_r+0x5c>
 8007464:	2a25      	cmp	r2, #37	; 0x25
 8007466:	d1f9      	bne.n	800745c <_svfiprintf_r+0x50>
 8007468:	ebba 0b04 	subs.w	fp, sl, r4
 800746c:	d00b      	beq.n	8007486 <_svfiprintf_r+0x7a>
 800746e:	465b      	mov	r3, fp
 8007470:	4622      	mov	r2, r4
 8007472:	4629      	mov	r1, r5
 8007474:	4638      	mov	r0, r7
 8007476:	f7ff ff6d 	bl	8007354 <__ssputs_r>
 800747a:	3001      	adds	r0, #1
 800747c:	f000 80aa 	beq.w	80075d4 <_svfiprintf_r+0x1c8>
 8007480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007482:	445a      	add	r2, fp
 8007484:	9209      	str	r2, [sp, #36]	; 0x24
 8007486:	f89a 3000 	ldrb.w	r3, [sl]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80a2 	beq.w	80075d4 <_svfiprintf_r+0x1c8>
 8007490:	2300      	movs	r3, #0
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800749a:	f10a 0a01 	add.w	sl, sl, #1
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	9307      	str	r3, [sp, #28]
 80074a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a6:	931a      	str	r3, [sp, #104]	; 0x68
 80074a8:	4654      	mov	r4, sl
 80074aa:	2205      	movs	r2, #5
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	4851      	ldr	r0, [pc, #324]	; (80075f8 <_svfiprintf_r+0x1ec>)
 80074b2:	f000 fa41 	bl	8007938 <memchr>
 80074b6:	9a04      	ldr	r2, [sp, #16]
 80074b8:	b9d8      	cbnz	r0, 80074f2 <_svfiprintf_r+0xe6>
 80074ba:	06d0      	lsls	r0, r2, #27
 80074bc:	bf44      	itt	mi
 80074be:	2320      	movmi	r3, #32
 80074c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c4:	0711      	lsls	r1, r2, #28
 80074c6:	bf44      	itt	mi
 80074c8:	232b      	movmi	r3, #43	; 0x2b
 80074ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ce:	f89a 3000 	ldrb.w	r3, [sl]
 80074d2:	2b2a      	cmp	r3, #42	; 0x2a
 80074d4:	d015      	beq.n	8007502 <_svfiprintf_r+0xf6>
 80074d6:	4654      	mov	r4, sl
 80074d8:	2000      	movs	r0, #0
 80074da:	f04f 0c0a 	mov.w	ip, #10
 80074de:	9a07      	ldr	r2, [sp, #28]
 80074e0:	4621      	mov	r1, r4
 80074e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e6:	3b30      	subs	r3, #48	; 0x30
 80074e8:	2b09      	cmp	r3, #9
 80074ea:	d94e      	bls.n	800758a <_svfiprintf_r+0x17e>
 80074ec:	b1b0      	cbz	r0, 800751c <_svfiprintf_r+0x110>
 80074ee:	9207      	str	r2, [sp, #28]
 80074f0:	e014      	b.n	800751c <_svfiprintf_r+0x110>
 80074f2:	eba0 0308 	sub.w	r3, r0, r8
 80074f6:	fa09 f303 	lsl.w	r3, r9, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	46a2      	mov	sl, r4
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	e7d2      	b.n	80074a8 <_svfiprintf_r+0x9c>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	9103      	str	r1, [sp, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bfbb      	ittet	lt
 800750e:	425b      	neglt	r3, r3
 8007510:	f042 0202 	orrlt.w	r2, r2, #2
 8007514:	9307      	strge	r3, [sp, #28]
 8007516:	9307      	strlt	r3, [sp, #28]
 8007518:	bfb8      	it	lt
 800751a:	9204      	strlt	r2, [sp, #16]
 800751c:	7823      	ldrb	r3, [r4, #0]
 800751e:	2b2e      	cmp	r3, #46	; 0x2e
 8007520:	d10c      	bne.n	800753c <_svfiprintf_r+0x130>
 8007522:	7863      	ldrb	r3, [r4, #1]
 8007524:	2b2a      	cmp	r3, #42	; 0x2a
 8007526:	d135      	bne.n	8007594 <_svfiprintf_r+0x188>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	3402      	adds	r4, #2
 800752c:	1d1a      	adds	r2, r3, #4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	9203      	str	r2, [sp, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfb8      	it	lt
 8007536:	f04f 33ff 	movlt.w	r3, #4294967295
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80075fc <_svfiprintf_r+0x1f0>
 8007540:	2203      	movs	r2, #3
 8007542:	4650      	mov	r0, sl
 8007544:	7821      	ldrb	r1, [r4, #0]
 8007546:	f000 f9f7 	bl	8007938 <memchr>
 800754a:	b140      	cbz	r0, 800755e <_svfiprintf_r+0x152>
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	eba0 000a 	sub.w	r0, r0, sl
 8007552:	fa03 f000 	lsl.w	r0, r3, r0
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	3401      	adds	r4, #1
 800755a:	4303      	orrs	r3, r0
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007562:	2206      	movs	r2, #6
 8007564:	4826      	ldr	r0, [pc, #152]	; (8007600 <_svfiprintf_r+0x1f4>)
 8007566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800756a:	f000 f9e5 	bl	8007938 <memchr>
 800756e:	2800      	cmp	r0, #0
 8007570:	d038      	beq.n	80075e4 <_svfiprintf_r+0x1d8>
 8007572:	4b24      	ldr	r3, [pc, #144]	; (8007604 <_svfiprintf_r+0x1f8>)
 8007574:	bb1b      	cbnz	r3, 80075be <_svfiprintf_r+0x1b2>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	3307      	adds	r3, #7
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	3308      	adds	r3, #8
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007584:	4433      	add	r3, r6
 8007586:	9309      	str	r3, [sp, #36]	; 0x24
 8007588:	e767      	b.n	800745a <_svfiprintf_r+0x4e>
 800758a:	460c      	mov	r4, r1
 800758c:	2001      	movs	r0, #1
 800758e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007592:	e7a5      	b.n	80074e0 <_svfiprintf_r+0xd4>
 8007594:	2300      	movs	r3, #0
 8007596:	f04f 0c0a 	mov.w	ip, #10
 800759a:	4619      	mov	r1, r3
 800759c:	3401      	adds	r4, #1
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	4620      	mov	r0, r4
 80075a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a6:	3a30      	subs	r2, #48	; 0x30
 80075a8:	2a09      	cmp	r2, #9
 80075aa:	d903      	bls.n	80075b4 <_svfiprintf_r+0x1a8>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0c5      	beq.n	800753c <_svfiprintf_r+0x130>
 80075b0:	9105      	str	r1, [sp, #20]
 80075b2:	e7c3      	b.n	800753c <_svfiprintf_r+0x130>
 80075b4:	4604      	mov	r4, r0
 80075b6:	2301      	movs	r3, #1
 80075b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80075bc:	e7f0      	b.n	80075a0 <_svfiprintf_r+0x194>
 80075be:	ab03      	add	r3, sp, #12
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4638      	mov	r0, r7
 80075c6:	4b10      	ldr	r3, [pc, #64]	; (8007608 <_svfiprintf_r+0x1fc>)
 80075c8:	a904      	add	r1, sp, #16
 80075ca:	f3af 8000 	nop.w
 80075ce:	1c42      	adds	r2, r0, #1
 80075d0:	4606      	mov	r6, r0
 80075d2:	d1d6      	bne.n	8007582 <_svfiprintf_r+0x176>
 80075d4:	89ab      	ldrh	r3, [r5, #12]
 80075d6:	065b      	lsls	r3, r3, #25
 80075d8:	f53f af2c 	bmi.w	8007434 <_svfiprintf_r+0x28>
 80075dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075de:	b01d      	add	sp, #116	; 0x74
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	462a      	mov	r2, r5
 80075ea:	4638      	mov	r0, r7
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <_svfiprintf_r+0x1fc>)
 80075ee:	a904      	add	r1, sp, #16
 80075f0:	f000 f87c 	bl	80076ec <_printf_i>
 80075f4:	e7eb      	b.n	80075ce <_svfiprintf_r+0x1c2>
 80075f6:	bf00      	nop
 80075f8:	08007c7e 	.word	0x08007c7e
 80075fc:	08007c84 	.word	0x08007c84
 8007600:	08007c88 	.word	0x08007c88
 8007604:	00000000 	.word	0x00000000
 8007608:	08007355 	.word	0x08007355

0800760c <_printf_common>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	4616      	mov	r6, r2
 8007612:	4699      	mov	r9, r3
 8007614:	688a      	ldr	r2, [r1, #8]
 8007616:	690b      	ldr	r3, [r1, #16]
 8007618:	4607      	mov	r7, r0
 800761a:	4293      	cmp	r3, r2
 800761c:	bfb8      	it	lt
 800761e:	4613      	movlt	r3, r2
 8007620:	6033      	str	r3, [r6, #0]
 8007622:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007626:	460c      	mov	r4, r1
 8007628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800762c:	b10a      	cbz	r2, 8007632 <_printf_common+0x26>
 800762e:	3301      	adds	r3, #1
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	0699      	lsls	r1, r3, #26
 8007636:	bf42      	ittt	mi
 8007638:	6833      	ldrmi	r3, [r6, #0]
 800763a:	3302      	addmi	r3, #2
 800763c:	6033      	strmi	r3, [r6, #0]
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	f015 0506 	ands.w	r5, r5, #6
 8007644:	d106      	bne.n	8007654 <_printf_common+0x48>
 8007646:	f104 0a19 	add.w	sl, r4, #25
 800764a:	68e3      	ldr	r3, [r4, #12]
 800764c:	6832      	ldr	r2, [r6, #0]
 800764e:	1a9b      	subs	r3, r3, r2
 8007650:	42ab      	cmp	r3, r5
 8007652:	dc28      	bgt.n	80076a6 <_printf_common+0x9a>
 8007654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007658:	1e13      	subs	r3, r2, #0
 800765a:	6822      	ldr	r2, [r4, #0]
 800765c:	bf18      	it	ne
 800765e:	2301      	movne	r3, #1
 8007660:	0692      	lsls	r2, r2, #26
 8007662:	d42d      	bmi.n	80076c0 <_printf_common+0xb4>
 8007664:	4649      	mov	r1, r9
 8007666:	4638      	mov	r0, r7
 8007668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800766c:	47c0      	blx	r8
 800766e:	3001      	adds	r0, #1
 8007670:	d020      	beq.n	80076b4 <_printf_common+0xa8>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	68e5      	ldr	r5, [r4, #12]
 8007676:	f003 0306 	and.w	r3, r3, #6
 800767a:	2b04      	cmp	r3, #4
 800767c:	bf18      	it	ne
 800767e:	2500      	movne	r5, #0
 8007680:	6832      	ldr	r2, [r6, #0]
 8007682:	f04f 0600 	mov.w	r6, #0
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	bf08      	it	eq
 800768a:	1aad      	subeq	r5, r5, r2
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	bf08      	it	eq
 8007690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007694:	4293      	cmp	r3, r2
 8007696:	bfc4      	itt	gt
 8007698:	1a9b      	subgt	r3, r3, r2
 800769a:	18ed      	addgt	r5, r5, r3
 800769c:	341a      	adds	r4, #26
 800769e:	42b5      	cmp	r5, r6
 80076a0:	d11a      	bne.n	80076d8 <_printf_common+0xcc>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e008      	b.n	80076b8 <_printf_common+0xac>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4652      	mov	r2, sl
 80076aa:	4649      	mov	r1, r9
 80076ac:	4638      	mov	r0, r7
 80076ae:	47c0      	blx	r8
 80076b0:	3001      	adds	r0, #1
 80076b2:	d103      	bne.n	80076bc <_printf_common+0xb0>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076bc:	3501      	adds	r5, #1
 80076be:	e7c4      	b.n	800764a <_printf_common+0x3e>
 80076c0:	2030      	movs	r0, #48	; 0x30
 80076c2:	18e1      	adds	r1, r4, r3
 80076c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ce:	4422      	add	r2, r4
 80076d0:	3302      	adds	r3, #2
 80076d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076d6:	e7c5      	b.n	8007664 <_printf_common+0x58>
 80076d8:	2301      	movs	r3, #1
 80076da:	4622      	mov	r2, r4
 80076dc:	4649      	mov	r1, r9
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	3001      	adds	r0, #1
 80076e4:	d0e6      	beq.n	80076b4 <_printf_common+0xa8>
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7d9      	b.n	800769e <_printf_common+0x92>
	...

080076ec <_printf_i>:
 80076ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	7e0f      	ldrb	r7, [r1, #24]
 80076f2:	4691      	mov	r9, r2
 80076f4:	2f78      	cmp	r7, #120	; 0x78
 80076f6:	4680      	mov	r8, r0
 80076f8:	460c      	mov	r4, r1
 80076fa:	469a      	mov	sl, r3
 80076fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007702:	d807      	bhi.n	8007714 <_printf_i+0x28>
 8007704:	2f62      	cmp	r7, #98	; 0x62
 8007706:	d80a      	bhi.n	800771e <_printf_i+0x32>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f000 80d9 	beq.w	80078c0 <_printf_i+0x1d4>
 800770e:	2f58      	cmp	r7, #88	; 0x58
 8007710:	f000 80a4 	beq.w	800785c <_printf_i+0x170>
 8007714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800771c:	e03a      	b.n	8007794 <_printf_i+0xa8>
 800771e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007722:	2b15      	cmp	r3, #21
 8007724:	d8f6      	bhi.n	8007714 <_printf_i+0x28>
 8007726:	a101      	add	r1, pc, #4	; (adr r1, 800772c <_printf_i+0x40>)
 8007728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800772c:	08007785 	.word	0x08007785
 8007730:	08007799 	.word	0x08007799
 8007734:	08007715 	.word	0x08007715
 8007738:	08007715 	.word	0x08007715
 800773c:	08007715 	.word	0x08007715
 8007740:	08007715 	.word	0x08007715
 8007744:	08007799 	.word	0x08007799
 8007748:	08007715 	.word	0x08007715
 800774c:	08007715 	.word	0x08007715
 8007750:	08007715 	.word	0x08007715
 8007754:	08007715 	.word	0x08007715
 8007758:	080078a7 	.word	0x080078a7
 800775c:	080077c9 	.word	0x080077c9
 8007760:	08007889 	.word	0x08007889
 8007764:	08007715 	.word	0x08007715
 8007768:	08007715 	.word	0x08007715
 800776c:	080078c9 	.word	0x080078c9
 8007770:	08007715 	.word	0x08007715
 8007774:	080077c9 	.word	0x080077c9
 8007778:	08007715 	.word	0x08007715
 800777c:	08007715 	.word	0x08007715
 8007780:	08007891 	.word	0x08007891
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	1d1a      	adds	r2, r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	602a      	str	r2, [r5, #0]
 800778c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007794:	2301      	movs	r3, #1
 8007796:	e0a4      	b.n	80078e2 <_printf_i+0x1f6>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	6829      	ldr	r1, [r5, #0]
 800779c:	0606      	lsls	r6, r0, #24
 800779e:	f101 0304 	add.w	r3, r1, #4
 80077a2:	d50a      	bpl.n	80077ba <_printf_i+0xce>
 80077a4:	680e      	ldr	r6, [r1, #0]
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	da03      	bge.n	80077b4 <_printf_i+0xc8>
 80077ac:	232d      	movs	r3, #45	; 0x2d
 80077ae:	4276      	negs	r6, r6
 80077b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b4:	230a      	movs	r3, #10
 80077b6:	485e      	ldr	r0, [pc, #376]	; (8007930 <_printf_i+0x244>)
 80077b8:	e019      	b.n	80077ee <_printf_i+0x102>
 80077ba:	680e      	ldr	r6, [r1, #0]
 80077bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	bf18      	it	ne
 80077c4:	b236      	sxthne	r6, r6
 80077c6:	e7ef      	b.n	80077a8 <_printf_i+0xbc>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	1d19      	adds	r1, r3, #4
 80077ce:	6029      	str	r1, [r5, #0]
 80077d0:	0601      	lsls	r1, r0, #24
 80077d2:	d501      	bpl.n	80077d8 <_printf_i+0xec>
 80077d4:	681e      	ldr	r6, [r3, #0]
 80077d6:	e002      	b.n	80077de <_printf_i+0xf2>
 80077d8:	0646      	lsls	r6, r0, #25
 80077da:	d5fb      	bpl.n	80077d4 <_printf_i+0xe8>
 80077dc:	881e      	ldrh	r6, [r3, #0]
 80077de:	2f6f      	cmp	r7, #111	; 0x6f
 80077e0:	bf0c      	ite	eq
 80077e2:	2308      	moveq	r3, #8
 80077e4:	230a      	movne	r3, #10
 80077e6:	4852      	ldr	r0, [pc, #328]	; (8007930 <_printf_i+0x244>)
 80077e8:	2100      	movs	r1, #0
 80077ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077ee:	6865      	ldr	r5, [r4, #4]
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	bfa8      	it	ge
 80077f4:	6821      	ldrge	r1, [r4, #0]
 80077f6:	60a5      	str	r5, [r4, #8]
 80077f8:	bfa4      	itt	ge
 80077fa:	f021 0104 	bicge.w	r1, r1, #4
 80077fe:	6021      	strge	r1, [r4, #0]
 8007800:	b90e      	cbnz	r6, 8007806 <_printf_i+0x11a>
 8007802:	2d00      	cmp	r5, #0
 8007804:	d04d      	beq.n	80078a2 <_printf_i+0x1b6>
 8007806:	4615      	mov	r5, r2
 8007808:	fbb6 f1f3 	udiv	r1, r6, r3
 800780c:	fb03 6711 	mls	r7, r3, r1, r6
 8007810:	5dc7      	ldrb	r7, [r0, r7]
 8007812:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007816:	4637      	mov	r7, r6
 8007818:	42bb      	cmp	r3, r7
 800781a:	460e      	mov	r6, r1
 800781c:	d9f4      	bls.n	8007808 <_printf_i+0x11c>
 800781e:	2b08      	cmp	r3, #8
 8007820:	d10b      	bne.n	800783a <_printf_i+0x14e>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	07de      	lsls	r6, r3, #31
 8007826:	d508      	bpl.n	800783a <_printf_i+0x14e>
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	6861      	ldr	r1, [r4, #4]
 800782c:	4299      	cmp	r1, r3
 800782e:	bfde      	ittt	le
 8007830:	2330      	movle	r3, #48	; 0x30
 8007832:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007836:	f105 35ff 	addle.w	r5, r5, #4294967295
 800783a:	1b52      	subs	r2, r2, r5
 800783c:	6122      	str	r2, [r4, #16]
 800783e:	464b      	mov	r3, r9
 8007840:	4621      	mov	r1, r4
 8007842:	4640      	mov	r0, r8
 8007844:	f8cd a000 	str.w	sl, [sp]
 8007848:	aa03      	add	r2, sp, #12
 800784a:	f7ff fedf 	bl	800760c <_printf_common>
 800784e:	3001      	adds	r0, #1
 8007850:	d14c      	bne.n	80078ec <_printf_i+0x200>
 8007852:	f04f 30ff 	mov.w	r0, #4294967295
 8007856:	b004      	add	sp, #16
 8007858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785c:	4834      	ldr	r0, [pc, #208]	; (8007930 <_printf_i+0x244>)
 800785e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007862:	6829      	ldr	r1, [r5, #0]
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	f851 6b04 	ldr.w	r6, [r1], #4
 800786a:	6029      	str	r1, [r5, #0]
 800786c:	061d      	lsls	r5, r3, #24
 800786e:	d514      	bpl.n	800789a <_printf_i+0x1ae>
 8007870:	07df      	lsls	r7, r3, #31
 8007872:	bf44      	itt	mi
 8007874:	f043 0320 	orrmi.w	r3, r3, #32
 8007878:	6023      	strmi	r3, [r4, #0]
 800787a:	b91e      	cbnz	r6, 8007884 <_printf_i+0x198>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	f023 0320 	bic.w	r3, r3, #32
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	2310      	movs	r3, #16
 8007886:	e7af      	b.n	80077e8 <_printf_i+0xfc>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	f043 0320 	orr.w	r3, r3, #32
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	2378      	movs	r3, #120	; 0x78
 8007892:	4828      	ldr	r0, [pc, #160]	; (8007934 <_printf_i+0x248>)
 8007894:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007898:	e7e3      	b.n	8007862 <_printf_i+0x176>
 800789a:	0659      	lsls	r1, r3, #25
 800789c:	bf48      	it	mi
 800789e:	b2b6      	uxthmi	r6, r6
 80078a0:	e7e6      	b.n	8007870 <_printf_i+0x184>
 80078a2:	4615      	mov	r5, r2
 80078a4:	e7bb      	b.n	800781e <_printf_i+0x132>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	6826      	ldr	r6, [r4, #0]
 80078aa:	1d18      	adds	r0, r3, #4
 80078ac:	6961      	ldr	r1, [r4, #20]
 80078ae:	6028      	str	r0, [r5, #0]
 80078b0:	0635      	lsls	r5, r6, #24
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	d501      	bpl.n	80078ba <_printf_i+0x1ce>
 80078b6:	6019      	str	r1, [r3, #0]
 80078b8:	e002      	b.n	80078c0 <_printf_i+0x1d4>
 80078ba:	0670      	lsls	r0, r6, #25
 80078bc:	d5fb      	bpl.n	80078b6 <_printf_i+0x1ca>
 80078be:	8019      	strh	r1, [r3, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	4615      	mov	r5, r2
 80078c4:	6123      	str	r3, [r4, #16]
 80078c6:	e7ba      	b.n	800783e <_printf_i+0x152>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	2100      	movs	r1, #0
 80078cc:	1d1a      	adds	r2, r3, #4
 80078ce:	602a      	str	r2, [r5, #0]
 80078d0:	681d      	ldr	r5, [r3, #0]
 80078d2:	6862      	ldr	r2, [r4, #4]
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 f82f 	bl	8007938 <memchr>
 80078da:	b108      	cbz	r0, 80078e0 <_printf_i+0x1f4>
 80078dc:	1b40      	subs	r0, r0, r5
 80078de:	6060      	str	r0, [r4, #4]
 80078e0:	6863      	ldr	r3, [r4, #4]
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	2300      	movs	r3, #0
 80078e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ea:	e7a8      	b.n	800783e <_printf_i+0x152>
 80078ec:	462a      	mov	r2, r5
 80078ee:	4649      	mov	r1, r9
 80078f0:	4640      	mov	r0, r8
 80078f2:	6923      	ldr	r3, [r4, #16]
 80078f4:	47d0      	blx	sl
 80078f6:	3001      	adds	r0, #1
 80078f8:	d0ab      	beq.n	8007852 <_printf_i+0x166>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	079b      	lsls	r3, r3, #30
 80078fe:	d413      	bmi.n	8007928 <_printf_i+0x23c>
 8007900:	68e0      	ldr	r0, [r4, #12]
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	4298      	cmp	r0, r3
 8007906:	bfb8      	it	lt
 8007908:	4618      	movlt	r0, r3
 800790a:	e7a4      	b.n	8007856 <_printf_i+0x16a>
 800790c:	2301      	movs	r3, #1
 800790e:	4632      	mov	r2, r6
 8007910:	4649      	mov	r1, r9
 8007912:	4640      	mov	r0, r8
 8007914:	47d0      	blx	sl
 8007916:	3001      	adds	r0, #1
 8007918:	d09b      	beq.n	8007852 <_printf_i+0x166>
 800791a:	3501      	adds	r5, #1
 800791c:	68e3      	ldr	r3, [r4, #12]
 800791e:	9903      	ldr	r1, [sp, #12]
 8007920:	1a5b      	subs	r3, r3, r1
 8007922:	42ab      	cmp	r3, r5
 8007924:	dcf2      	bgt.n	800790c <_printf_i+0x220>
 8007926:	e7eb      	b.n	8007900 <_printf_i+0x214>
 8007928:	2500      	movs	r5, #0
 800792a:	f104 0619 	add.w	r6, r4, #25
 800792e:	e7f5      	b.n	800791c <_printf_i+0x230>
 8007930:	08007c8f 	.word	0x08007c8f
 8007934:	08007ca0 	.word	0x08007ca0

08007938 <memchr>:
 8007938:	4603      	mov	r3, r0
 800793a:	b510      	push	{r4, lr}
 800793c:	b2c9      	uxtb	r1, r1
 800793e:	4402      	add	r2, r0
 8007940:	4293      	cmp	r3, r2
 8007942:	4618      	mov	r0, r3
 8007944:	d101      	bne.n	800794a <memchr+0x12>
 8007946:	2000      	movs	r0, #0
 8007948:	e003      	b.n	8007952 <memchr+0x1a>
 800794a:	7804      	ldrb	r4, [r0, #0]
 800794c:	3301      	adds	r3, #1
 800794e:	428c      	cmp	r4, r1
 8007950:	d1f6      	bne.n	8007940 <memchr+0x8>
 8007952:	bd10      	pop	{r4, pc}

08007954 <memmove>:
 8007954:	4288      	cmp	r0, r1
 8007956:	b510      	push	{r4, lr}
 8007958:	eb01 0402 	add.w	r4, r1, r2
 800795c:	d902      	bls.n	8007964 <memmove+0x10>
 800795e:	4284      	cmp	r4, r0
 8007960:	4623      	mov	r3, r4
 8007962:	d807      	bhi.n	8007974 <memmove+0x20>
 8007964:	1e43      	subs	r3, r0, #1
 8007966:	42a1      	cmp	r1, r4
 8007968:	d008      	beq.n	800797c <memmove+0x28>
 800796a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800796e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007972:	e7f8      	b.n	8007966 <memmove+0x12>
 8007974:	4601      	mov	r1, r0
 8007976:	4402      	add	r2, r0
 8007978:	428a      	cmp	r2, r1
 800797a:	d100      	bne.n	800797e <memmove+0x2a>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007986:	e7f7      	b.n	8007978 <memmove+0x24>

08007988 <_free_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4605      	mov	r5, r0
 800798c:	2900      	cmp	r1, #0
 800798e:	d040      	beq.n	8007a12 <_free_r+0x8a>
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f0c      	subs	r4, r1, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfb8      	it	lt
 800799a:	18e4      	addlt	r4, r4, r3
 800799c:	f000 f910 	bl	8007bc0 <__malloc_lock>
 80079a0:	4a1c      	ldr	r2, [pc, #112]	; (8007a14 <_free_r+0x8c>)
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	b933      	cbnz	r3, 80079b4 <_free_r+0x2c>
 80079a6:	6063      	str	r3, [r4, #4]
 80079a8:	6014      	str	r4, [r2, #0]
 80079aa:	4628      	mov	r0, r5
 80079ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b0:	f000 b90c 	b.w	8007bcc <__malloc_unlock>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d908      	bls.n	80079ca <_free_r+0x42>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	1821      	adds	r1, r4, r0
 80079bc:	428b      	cmp	r3, r1
 80079be:	bf01      	itttt	eq
 80079c0:	6819      	ldreq	r1, [r3, #0]
 80079c2:	685b      	ldreq	r3, [r3, #4]
 80079c4:	1809      	addeq	r1, r1, r0
 80079c6:	6021      	streq	r1, [r4, #0]
 80079c8:	e7ed      	b.n	80079a6 <_free_r+0x1e>
 80079ca:	461a      	mov	r2, r3
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	b10b      	cbz	r3, 80079d4 <_free_r+0x4c>
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	d9fa      	bls.n	80079ca <_free_r+0x42>
 80079d4:	6811      	ldr	r1, [r2, #0]
 80079d6:	1850      	adds	r0, r2, r1
 80079d8:	42a0      	cmp	r0, r4
 80079da:	d10b      	bne.n	80079f4 <_free_r+0x6c>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	4401      	add	r1, r0
 80079e0:	1850      	adds	r0, r2, r1
 80079e2:	4283      	cmp	r3, r0
 80079e4:	6011      	str	r1, [r2, #0]
 80079e6:	d1e0      	bne.n	80079aa <_free_r+0x22>
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4401      	add	r1, r0
 80079ee:	6011      	str	r1, [r2, #0]
 80079f0:	6053      	str	r3, [r2, #4]
 80079f2:	e7da      	b.n	80079aa <_free_r+0x22>
 80079f4:	d902      	bls.n	80079fc <_free_r+0x74>
 80079f6:	230c      	movs	r3, #12
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	e7d6      	b.n	80079aa <_free_r+0x22>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	1821      	adds	r1, r4, r0
 8007a00:	428b      	cmp	r3, r1
 8007a02:	bf01      	itttt	eq
 8007a04:	6819      	ldreq	r1, [r3, #0]
 8007a06:	685b      	ldreq	r3, [r3, #4]
 8007a08:	1809      	addeq	r1, r1, r0
 8007a0a:	6021      	streq	r1, [r4, #0]
 8007a0c:	6063      	str	r3, [r4, #4]
 8007a0e:	6054      	str	r4, [r2, #4]
 8007a10:	e7cb      	b.n	80079aa <_free_r+0x22>
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	20001404 	.word	0x20001404

08007a18 <sbrk_aligned>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4e0e      	ldr	r6, [pc, #56]	; (8007a54 <sbrk_aligned+0x3c>)
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	6831      	ldr	r1, [r6, #0]
 8007a20:	4605      	mov	r5, r0
 8007a22:	b911      	cbnz	r1, 8007a2a <sbrk_aligned+0x12>
 8007a24:	f000 f8bc 	bl	8007ba0 <_sbrk_r>
 8007a28:	6030      	str	r0, [r6, #0]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f8b7 	bl	8007ba0 <_sbrk_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d00a      	beq.n	8007a4c <sbrk_aligned+0x34>
 8007a36:	1cc4      	adds	r4, r0, #3
 8007a38:	f024 0403 	bic.w	r4, r4, #3
 8007a3c:	42a0      	cmp	r0, r4
 8007a3e:	d007      	beq.n	8007a50 <sbrk_aligned+0x38>
 8007a40:	1a21      	subs	r1, r4, r0
 8007a42:	4628      	mov	r0, r5
 8007a44:	f000 f8ac 	bl	8007ba0 <_sbrk_r>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d101      	bne.n	8007a50 <sbrk_aligned+0x38>
 8007a4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a50:	4620      	mov	r0, r4
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	20001408 	.word	0x20001408

08007a58 <_malloc_r>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	1ccd      	adds	r5, r1, #3
 8007a5e:	f025 0503 	bic.w	r5, r5, #3
 8007a62:	3508      	adds	r5, #8
 8007a64:	2d0c      	cmp	r5, #12
 8007a66:	bf38      	it	cc
 8007a68:	250c      	movcc	r5, #12
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	db01      	blt.n	8007a74 <_malloc_r+0x1c>
 8007a70:	42a9      	cmp	r1, r5
 8007a72:	d905      	bls.n	8007a80 <_malloc_r+0x28>
 8007a74:	230c      	movs	r3, #12
 8007a76:	2600      	movs	r6, #0
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a80:	4e2e      	ldr	r6, [pc, #184]	; (8007b3c <_malloc_r+0xe4>)
 8007a82:	f000 f89d 	bl	8007bc0 <__malloc_lock>
 8007a86:	6833      	ldr	r3, [r6, #0]
 8007a88:	461c      	mov	r4, r3
 8007a8a:	bb34      	cbnz	r4, 8007ada <_malloc_r+0x82>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f7ff ffc2 	bl	8007a18 <sbrk_aligned>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	4604      	mov	r4, r0
 8007a98:	d14d      	bne.n	8007b36 <_malloc_r+0xde>
 8007a9a:	6834      	ldr	r4, [r6, #0]
 8007a9c:	4626      	mov	r6, r4
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d140      	bne.n	8007b24 <_malloc_r+0xcc>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	eb04 0803 	add.w	r8, r4, r3
 8007aac:	f000 f878 	bl	8007ba0 <_sbrk_r>
 8007ab0:	4580      	cmp	r8, r0
 8007ab2:	d13a      	bne.n	8007b2a <_malloc_r+0xd2>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	3503      	adds	r5, #3
 8007ab8:	1a6d      	subs	r5, r5, r1
 8007aba:	f025 0503 	bic.w	r5, r5, #3
 8007abe:	3508      	adds	r5, #8
 8007ac0:	2d0c      	cmp	r5, #12
 8007ac2:	bf38      	it	cc
 8007ac4:	250c      	movcc	r5, #12
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7ff ffa5 	bl	8007a18 <sbrk_aligned>
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d02b      	beq.n	8007b2a <_malloc_r+0xd2>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	442b      	add	r3, r5
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	e00e      	b.n	8007af8 <_malloc_r+0xa0>
 8007ada:	6822      	ldr	r2, [r4, #0]
 8007adc:	1b52      	subs	r2, r2, r5
 8007ade:	d41e      	bmi.n	8007b1e <_malloc_r+0xc6>
 8007ae0:	2a0b      	cmp	r2, #11
 8007ae2:	d916      	bls.n	8007b12 <_malloc_r+0xba>
 8007ae4:	1961      	adds	r1, r4, r5
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	6025      	str	r5, [r4, #0]
 8007aea:	bf18      	it	ne
 8007aec:	6059      	strne	r1, [r3, #4]
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	bf08      	it	eq
 8007af2:	6031      	streq	r1, [r6, #0]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4638      	mov	r0, r7
 8007afa:	f104 060b 	add.w	r6, r4, #11
 8007afe:	f000 f865 	bl	8007bcc <__malloc_unlock>
 8007b02:	f026 0607 	bic.w	r6, r6, #7
 8007b06:	1d23      	adds	r3, r4, #4
 8007b08:	1af2      	subs	r2, r6, r3
 8007b0a:	d0b6      	beq.n	8007a7a <_malloc_r+0x22>
 8007b0c:	1b9b      	subs	r3, r3, r6
 8007b0e:	50a3      	str	r3, [r4, r2]
 8007b10:	e7b3      	b.n	8007a7a <_malloc_r+0x22>
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	bf0c      	ite	eq
 8007b18:	6032      	streq	r2, [r6, #0]
 8007b1a:	605a      	strne	r2, [r3, #4]
 8007b1c:	e7ec      	b.n	8007af8 <_malloc_r+0xa0>
 8007b1e:	4623      	mov	r3, r4
 8007b20:	6864      	ldr	r4, [r4, #4]
 8007b22:	e7b2      	b.n	8007a8a <_malloc_r+0x32>
 8007b24:	4634      	mov	r4, r6
 8007b26:	6876      	ldr	r6, [r6, #4]
 8007b28:	e7b9      	b.n	8007a9e <_malloc_r+0x46>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	f000 f84c 	bl	8007bcc <__malloc_unlock>
 8007b34:	e7a1      	b.n	8007a7a <_malloc_r+0x22>
 8007b36:	6025      	str	r5, [r4, #0]
 8007b38:	e7de      	b.n	8007af8 <_malloc_r+0xa0>
 8007b3a:	bf00      	nop
 8007b3c:	20001404 	.word	0x20001404

08007b40 <_realloc_r>:
 8007b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b44:	4680      	mov	r8, r0
 8007b46:	4614      	mov	r4, r2
 8007b48:	460e      	mov	r6, r1
 8007b4a:	b921      	cbnz	r1, 8007b56 <_realloc_r+0x16>
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b52:	f7ff bf81 	b.w	8007a58 <_malloc_r>
 8007b56:	b92a      	cbnz	r2, 8007b64 <_realloc_r+0x24>
 8007b58:	f7ff ff16 	bl	8007988 <_free_r>
 8007b5c:	4625      	mov	r5, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b64:	f000 f838 	bl	8007bd8 <_malloc_usable_size_r>
 8007b68:	4284      	cmp	r4, r0
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	d802      	bhi.n	8007b74 <_realloc_r+0x34>
 8007b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b72:	d812      	bhi.n	8007b9a <_realloc_r+0x5a>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4640      	mov	r0, r8
 8007b78:	f7ff ff6e 	bl	8007a58 <_malloc_r>
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0ed      	beq.n	8007b5e <_realloc_r+0x1e>
 8007b82:	42bc      	cmp	r4, r7
 8007b84:	4622      	mov	r2, r4
 8007b86:	4631      	mov	r1, r6
 8007b88:	bf28      	it	cs
 8007b8a:	463a      	movcs	r2, r7
 8007b8c:	f7ff fbac 	bl	80072e8 <memcpy>
 8007b90:	4631      	mov	r1, r6
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff fef8 	bl	8007988 <_free_r>
 8007b98:	e7e1      	b.n	8007b5e <_realloc_r+0x1e>
 8007b9a:	4635      	mov	r5, r6
 8007b9c:	e7df      	b.n	8007b5e <_realloc_r+0x1e>
	...

08007ba0 <_sbrk_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4d05      	ldr	r5, [pc, #20]	; (8007bbc <_sbrk_r+0x1c>)
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	4608      	mov	r0, r1
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	f7f8 fbdc 	bl	8000368 <_sbrk>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_sbrk_r+0x1a>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_sbrk_r+0x1a>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	2000140c 	.word	0x2000140c

08007bc0 <__malloc_lock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	; (8007bc8 <__malloc_lock+0x8>)
 8007bc2:	f000 b811 	b.w	8007be8 <__retarget_lock_acquire_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20001410 	.word	0x20001410

08007bcc <__malloc_unlock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__malloc_unlock+0x8>)
 8007bce:	f000 b80c 	b.w	8007bea <__retarget_lock_release_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20001410 	.word	0x20001410

08007bd8 <_malloc_usable_size_r>:
 8007bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bdc:	1f18      	subs	r0, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfbc      	itt	lt
 8007be2:	580b      	ldrlt	r3, [r1, r0]
 8007be4:	18c0      	addlt	r0, r0, r3
 8007be6:	4770      	bx	lr

08007be8 <__retarget_lock_acquire_recursive>:
 8007be8:	4770      	bx	lr

08007bea <__retarget_lock_release_recursive>:
 8007bea:	4770      	bx	lr

08007bec <_init>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_fini>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr
